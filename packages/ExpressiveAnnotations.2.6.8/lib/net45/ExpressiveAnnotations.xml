<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExpressiveAnnotations</name>
    </assembly>
    <members>
        <member name="T:ExpressiveAnnotations.Analysis.ParseErrorException">
            <summary>
                The exception thrown when parse operation detects error in a specified expression.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.ParseErrorException.#ctor(System.String,ExpressiveAnnotations.Analysis.Location)">
            <summary>
                Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Analysis.ParseErrorException" />.
            </summary>
            <param name="message">The error message.</param>
            <param name="location">The erratic code location.</param>
        </member>
        <member name="P:ExpressiveAnnotations.Analysis.ParseErrorException.Location">
            <summary>
                Gets the erratic code location related to this error.
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Analysis.Location">
            <summary>
                Contains the location information related to some arbitrary data within associated text block.
                <para>
                    Used for pointing exact parsing error location in specified expression.
                </para>
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Location.#ctor(ExpressiveAnnotations.Analysis.Location)">
            <summary>
                Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Analysis.Location" /> class.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Location.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Analysis.Location" /> class.
            </summary>
            <param name="line">The line number.</param>
            <param name="column">The column number.</param>
        </member>
        <member name="P:ExpressiveAnnotations.Analysis.Location.Line">
            <summary>
                Gets or sets the line number.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Analysis.Location.Column">
            <summary>
                Gets or sets the column number.
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Analysis.TokenType">
            <summary>
                Token type.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.AND">
            <summary>
                Logical conjunction (i.e. &amp;&amp;).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.OR">
            <summary>
                Logical disjunction (i.e. ||).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.NOT">
            <summary>
                Logical negation (i.e. !).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.GE">
            <summary>
                Greater than or equal to (i.e. &gt;=).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.LE">
            <summary>
                Less than or equal to (i.e. &lt;=).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.GT">
            <summary>
                Greater than (i.e. &gt;).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.LT">
            <summary>
                Less than (i.e. &lt;).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.EQ">
            <summary>
                Equal to (i.e. ==).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.NEQ">
            <summary>
                Not equal to (i.e. !=).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.ADD">
            <summary>
                Addition (i.e. +).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.SUB">
            <summary>
                Subtraction (i.e. -).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.MUL">
            <summary>
                Multiplication (i.e. *).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.DIV">
            <summary>
                Division (i.e. /).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.INC">
            <summary>
                Prefix/postfix inc (i.e. ++).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.DEC">
            <summary>
                Prefix/postfix dec (i.e. --).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.LEFT_BRACKET">
            <summary>
                Left bracket (i.e. ().
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.RIGHT_BRACKET">
            <summary>
                Right bracket (i.e. )).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.COMMA">
            <summary>
                Comma (i.e. ,).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.NULL">
            <summary>
                NULL (i.e. null).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.INT">
            <summary>
                Integer value (e.g. 123).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.BOOL">
            <summary>
                Boolean value (i.e. true, false).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.FLOAT">
            <summary>
                Float value (e.g. 1.5, -0.3e-2).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.STRING">
            <summary>
                String (e.g. 'in single quotes').
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.FUNC">
            <summary>
                Function (i.e. SomeProperty, SomeType.CONST, SomeEnumType.SomeValue, SomeArray[0], SomeFunction(...)).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.EOF">
            <summary>
                End of expression.
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Analysis.Token">
            <summary>
                Token definition.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Token.#ctor(ExpressiveAnnotations.Analysis.TokenType,System.Object,ExpressiveAnnotations.Analysis.Location)">
            <summary>
                Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Analysis.Token" /> class.
            </summary>
            <param name="type">The token type.</param>
            <param name="value">The token value.</param>
            <param name="location">The token location within a specified expression.</param>
        </member>
        <member name="P:ExpressiveAnnotations.Analysis.Token.Type">
            <summary>
                Gets the token type.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Analysis.Token.Value">
            <summary>
                Gets the token value.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Analysis.Token.Location">
            <summary>
                Gets or sets the token location within a specified expression.
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Analysis.Lexer">
            <summary>
                Performs the lexical analysis of a specified logical expression.
            </summary>
            <remarks>
                Type is thread safe.
            </remarks>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Lexer.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Analysis.Lexer" /> class.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Lexer.Analyze(System.String)">
            <summary>
                Analyzes a specified logical expression and extracts a sequence of tokens.
            </summary>
            <param name="expression">The logical expression.</param>
            <returns>
                A sequence of extracted tokens.
            </returns>
            <exception cref="T:System.ArgumentNullException">expression;Expression not provided.</exception>
        </member>
        <member name="T:ExpressiveAnnotations.Analysis.Parser">
            <summary>
                Performs the syntactic analysis of a specified logical expression within given context.
            </summary>
            <remarks>
                Type is thread safe.
            </remarks>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Analysis.Parser" /> class.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.Parse``1(System.String)">
            <summary>
                Parses a specified logical expression into expression tree within given context.
            </summary>
            <typeparam name="TContext">The type identifier of the context within which the expression is interpreted.</typeparam>
            <param name="expression">The logical expression.</param>
            <returns>
                A delegate containing the compiled version of the lambda expression described by created expression tree.
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.Parse(System.Type,System.String)">
            <summary>
                Parses a specified logical expression into expression tree within given context.
            </summary>
            <param name="context">The type instance of the context within which the expression is interpreted.</param>
            <param name="expression">The logical expression.</param>
            <returns>
                A delegate containing the compiled version of the lambda expression described by created expression tree.
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.AddFunction``1(System.String,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Registers function signature for the parser.
            </summary>
            <typeparam name="TResult">Type identifier of returned result.</typeparam>
            <param name="name">Function name.</param>
            <param name="func">Function lambda.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.AddFunction``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Registers function signature for the parser.
            </summary>
            <typeparam name="TArg1">First argument.</typeparam>
            <typeparam name="TResult">Type identifier of returned result.</typeparam>
            <param name="name">Function name.</param>
            <param name="func">Function lambda.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.AddFunction``3(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
                Registers function signature for the parser.
            </summary>
            <typeparam name="TArg1">First argument.</typeparam>
            <typeparam name="TArg2">Second argument.</typeparam>
            <typeparam name="TResult">Type identifier of returned result.</typeparam>
            <param name="name">Function name.</param>
            <param name="func">Function lambda.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.AddFunction``4(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
                Registers function signature for the parser.
            </summary>
            <typeparam name="TArg1">First argument.</typeparam>
            <typeparam name="TArg2">Second argument.</typeparam>
            <typeparam name="TArg3">Third argument.</typeparam>
            <typeparam name="TResult">Type identifier of returned result.</typeparam>
            <param name="name">Function name.</param>
            <param name="func">Function lambda.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.AddFunction``5(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
                Registers function signature for the parser.
            </summary>
            <typeparam name="TArg1">First argument.</typeparam>
            <typeparam name="TArg2">Second argument.</typeparam>
            <typeparam name="TArg3">Third argument.</typeparam>
            <typeparam name="TArg4">Fourth argument.</typeparam>
            <typeparam name="TResult">Type identifier of returned result.</typeparam>
            <param name="name">Function name.</param>
            <param name="func">Function lambda.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.AddFunction``6(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
                Registers function signature for the parser.
            </summary>
            <typeparam name="TArg1">First argument.</typeparam>
            <typeparam name="TArg2">Second argument.</typeparam>
            <typeparam name="TArg3">Third argument.</typeparam>
            <typeparam name="TArg4">Fourth argument.</typeparam>
            <typeparam name="TArg5">Fifth argument.</typeparam>
            <typeparam name="TResult">Type identifier of returned result.</typeparam>
            <param name="name">Function name.</param>
            <param name="func">Function lambda.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.AddFunction``7(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
                Registers function signature for the parser.
            </summary>
            <typeparam name="TArg1">First argument.</typeparam>
            <typeparam name="TArg2">Second argument.</typeparam>
            <typeparam name="TArg3">Third argument.</typeparam>
            <typeparam name="TArg4">Fourth argument.</typeparam>
            <typeparam name="TArg5">Fifth argument.</typeparam>
            <typeparam name="TArg6">Sixth argument.</typeparam>
            <typeparam name="TResult">Type identifier of returned result.</typeparam>
            <param name="name">Function name.</param>
            <param name="func">Function lambda.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.GetFields">
            <summary>
                Gets names and types of properties extracted from specified expression within given context.
            </summary>
            <returns>
                Dictionary containing names and types.
            </returns>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.GetConsts">
            <summary>
                Gets names and values of constants extracted from specified expression within given context.
            </summary>
            <returns>
                Dictionary containing names and values.
            </returns>
        </member>
        <member name="T:ExpressiveAnnotations.Attributes.AssertThatAttribute">
            <summary>
                Validation attribute, executed for non-null annotated field, which indicates that assertion given in logical expression 
                has to be satisfied, for such field to be considered as valid.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.AssertThatAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Attributes.AssertThatAttribute" /> class.
            </summary>
            <param name="expression">The logical expression based on which assertion condition is computed.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.AssertThatAttribute.IsValidInternal(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
                Validates a specified value with respect to the associated validation attribute.
                Internally used by the <see cref="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" /> method.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The validation context.</param>
            <returns>
                An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class.
            </returns>
        </member>
        <member name="T:ExpressiveAnnotations.Attributes.ExpressiveAttribute">
            <summary>
                Base class for expressive validation attributes.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.#ctor(System.String,System.String)">
            <summary>
                Constructor for expressive validation attribute.
            </summary>
            <param name="expression">The logical expression based on which specified condition is computed.</param>
            <param name="errorMessage">The error message to associate with a validation control.</param>
            <exception cref="T:System.ArgumentNullException">expression;Expression not provided.</exception>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.ExpressiveAttribute.CachedValidationFuncs">
            <summary>
                Gets the cached validation funcs.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.ExpressiveAttribute.Parser">
            <summary>
                Gets the parser.
            </summary>        
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.ExpressiveAttribute.Expression">
            <summary>
                Gets the logical expression based on which specified condition is computed.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.ExpressiveAttribute.Priority">
            <summary>
                Gets or sets the hint, available for any concerned external components, indicating the order in which this attribute should be 
                executed among others of its kind, i.e. <see cref="T:ExpressiveAnnotations.Attributes.ExpressiveAttribute" />.
                <para>
                    Consumers must use the <see cref="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.GetPriority" /> method to retrieve the value, as this property getter will throw an 
                    exception if the value has not been set.
                </para>
            </summary>
            <remarks>
                Value is optional and not set by default, which means that execution order is undefined.
                <para>
                    Lowest value means highest priority.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                If the getter of this property is invoked when the value has not been explicitly set using the setter.
            </exception> 
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.ExpressiveAttribute.TypeId">
            <summary>
                When implemented in a derived class, gets a unique identifier for this <see cref="T:System.Attribute" />.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.Compile(System.Type,System.Boolean)">
            <summary>
                Parses and compiles expression provided to the attribute. Compiled lambda is then cached and used for validation purposes.
            </summary>
            <param name="validationContextType">The type of the object to be validated.</param>
            <param name="force">Flag indicating whether parsing should be rerun despite the fact compiled lambda already exists.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.FormatErrorMessage(System.String,System.String,System.Object)">
            <summary>
                Formats the error message for user.
            </summary>
            <param name="displayName">The user-visible name of the required field to include in the formatted message.</param>
            <param name="expression">The user-visible expression to include in the formatted message.</param>
            <param name="objectInstance">The anotated field declaring container instance.</param>
            <returns>
                The localized message to present to the user.
            </returns>
            <exception cref="T:System.FormatException"></exception>
            <remarks>
                This method interprets custom format specifiers, provided to error message string, for which values or display names of model fields are extracted. Specifiers should be given
                in braces (curly brackets), i.e. {fieldPath[:indicator]}, e.g. {field}, {field.field:n}. Braces can be escaped by double-braces, i.e. to output a { use {{ and to output a } use }}.
            </remarks>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.FormatErrorMessage(System.String,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.Guid}@)">
            <summary>
                Formats the error message for client (value indicators not resolved - replaced by guids to be dynamically extracted by client-code).
            </summary>
            <param name="displayName">The user-visible name of the required field to include in the formatted message.</param>
            <param name="expression">The user-visible expression to include in the formatted message.</param>
            <param name="objectType">The annotated field declaring container type.</param>
            <param name="fieldsMap">The map containing fields names for which values should be extracted by client-side.</param>
            <returns>
                The localized message to sent to the client-side component.
            </returns>
            <exception cref="T:System.FormatException"></exception>
            <remarks>
                This method interprets custom format specifiers, provided to error message string, for which values or display names of model fields are extracted. Specifiers should be given
                in braces (curly brackets), i.e. {fieldPath[:indicator]}, e.g. {field}, {field.field:n}. Braces can be escaped by double-braces, i.e. to output a { use {{ and to output a } use }}.
            </remarks>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.GetPriority">
            <summary>
                Gets the value of <see cref="P:ExpressiveAnnotations.Attributes.ExpressiveAttribute.Priority" /> if it has been set, or <c>null</c>.
            </summary>
            <returns>
                When <see cref="P:ExpressiveAnnotations.Attributes.ExpressiveAttribute.Priority" /> has been set returns the value of that property.
                <para>
                    When <see cref="P:ExpressiveAnnotations.Attributes.ExpressiveAttribute.Priority" /> has not been set returns <c>null</c>.
                </para>
            </returns>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.IsValidInternal(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
                Validates a specified value with respect to the associated validation attribute.
                Internally used by the <see cref="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" /> method.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The validation context.</param>
            <returns>
                An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class.
            </returns>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
                Validates a specified value with respect to the associated validation attribute.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The validation context.</param>
            <returns>
                An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class.
            </returns>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"></exception>
        </member>
        <member name="T:ExpressiveAnnotations.Attributes.ValueParserAttribute">
            <summary>
                Provides a hint for client-side script pointing at parser name, which should be used for DOM field value deserialization.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.ValueParserAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Attributes.ValueParserAttribute" /> class.
            </summary>
            <param name="parserName">Name of the parser.</param>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.ValueParserAttribute.ParserName">
            <summary>
                Gets the name of the parser.
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Attributes.RequiredIfAttribute">
            <summary>
                Validation attribute which indicates that annotated field is required when computed result of given logical expression is true.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.RequiredIfAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Attributes.RequiredIfAttribute" /> class.
            </summary>
            <param name="expression">The logical expression based on which requirement condition is computed.</param>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.RequiredIfAttribute.AllowEmptyStrings">
            <summary>
                Gets or sets a flag indicating whether the attribute should allow empty or whitespace strings.
            </summary>
            <remarks>
                <c>false</c> by default.
            </remarks>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.RequiredIfAttribute.IsValidInternal(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
                Validates a specified value with respect to the associated validation attribute.
                Internally used by the <see cref="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" /> method.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The validation context.</param>
            <returns>
                An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class.
            </returns>
        </member>
        <member name="T:ExpressiveAnnotations.Toolchain">
            <summary>
                Contains a set of predefined methods.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Toolchain.RegisterMethods(ExpressiveAnnotations.Analysis.Parser)">
            <summary>
                Registers built-in methods for expressions parser.
            </summary>
            <param name="parser">The parser instance.</param>
        </member>
    </members>
</doc>
