//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MES.Data.Library
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MESDataEntities : DbContext
    {
        public MESDataEntities()
            : base("name=MESDataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<RFQType> RFQTypes { get; set; }
        public virtual DbSet<ProjectCategory> ProjectCategories { get; set; }
        public virtual DbSet<ProjectStage> ProjectStages { get; set; }
        public virtual DbSet<CoatingType> CoatingTypes { get; set; }
        public virtual DbSet<Origin> Origins { get; set; }
        public virtual DbSet<Process> Processes { get; set; }
        public virtual DbSet<Remark> Remarks { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<Forwarder> Forwarders { get; set; }
        public virtual DbSet<MachineDesc> MachineDescs { get; set; }
        public virtual DbSet<MachiningDesc> MachiningDescs { get; set; }
        public virtual DbSet<Commodity> Commodities { get; set; }
        public virtual DbSet<CommodityCategory> CommodityCategories { get; set; }
        public virtual DbSet<AssociatedTo> AssociatedToes { get; set; }
        public virtual DbSet<DocumentType> DocumentTypes { get; set; }
        public virtual DbSet<DocumentTypeAssociatedTo> DocumentTypeAssociatedToes { get; set; }
        public virtual DbSet<RFQSource> RFQSources { get; set; }
        public virtual DbSet<NonAwardFeedback> NonAwardFeedbacks { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<SecondaryOperationDesc> SecondaryOperationDescs { get; set; }
        public virtual DbSet<RemarksAssociatedTo> RemarksAssociatedToes { get; set; }
        public virtual DbSet<StatusAssociatedTo> StatusAssociatedToes { get; set; }
        public virtual DbSet<CommodityType> CommodityTypes { get; set; }
        public virtual DbSet<CommodityTypeCustomer> CommodityTypeCustomers { get; set; }
        public virtual DbSet<CommodityTypeSupplier> CommodityTypeSuppliers { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Division> Divisions { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Prefix> Prefixes { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<DesignationMapping> DesignationMappings { get; set; }
        public virtual DbSet<Document1> Document1 { get; set; }
        public virtual DbSet<POPart> POParts { get; set; }
        public virtual DbSet<Shipment> Shipments { get; set; }
        public virtual DbSet<Destination> Destinations { get; set; }
        public virtual DbSet<Part> Parts { get; set; }
        public virtual DbSet<ShipmentSupplier> ShipmentSuppliers { get; set; }
        public virtual DbSet<rfqSupplier> rfqSuppliers { get; set; }
        public virtual DbSet<SupplierPartQuote> SupplierPartQuotes { get; set; }
        public virtual DbSet<dqMachining> dqMachinings { get; set; }
        public virtual DbSet<dqMachiningOtherOperation> dqMachiningOtherOperations { get; set; }
        public virtual DbSet<dqMachiningSecondaryOperation> dqMachiningSecondaryOperations { get; set; }
        public virtual DbSet<dqOverhead> dqOverheads { get; set; }
        public virtual DbSet<dqPrimaryProcessConversion> dqPrimaryProcessConversions { get; set; }
        public virtual DbSet<dqSurfaceTreatment> dqSurfaceTreatments { get; set; }
        public virtual DbSet<QuoteStatu> QuoteStatus { get; set; }
        public virtual DbSet<Quote> Quotes { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AddressType> AddressTypes { get; set; }
        public virtual DbSet<QuoteCalculationHistory> QuoteCalculationHistories { get; set; }
        public virtual DbSet<PageSize> PageSizes { get; set; }
        public virtual DbSet<UserPreference> UserPreferences { get; set; }
        public virtual DbSet<AssessmentQuestionType> AssessmentQuestionTypes { get; set; }
        public virtual DbSet<AssessmentScopeOfWork> AssessmentScopeOfWorks { get; set; }
        public virtual DbSet<AssessmentElement> AssessmentElements { get; set; }
        public virtual DbSet<apqpDocument> apqpDocuments { get; set; }
        public virtual DbSet<PPAPSubmission> PPAPSubmissions { get; set; }
        public virtual DbSet<ProjectTracking> ProjectTrackings { get; set; }
        public virtual DbSet<SAPItemFlatTable> SAPItemFlatTables { get; set; }
        public virtual DbSet<ToolingLaunch> ToolingLaunches { get; set; }
        public virtual DbSet<AssessmentSubElementDetail> AssessmentSubElementDetails { get; set; }
        public virtual DbSet<AssessmentSubElementValue> AssessmentSubElementValues { get; set; }
        public virtual DbSet<AssessmentElementDetail> AssessmentElementDetails { get; set; }
        public virtual DbSet<AssessmentElementValue> AssessmentElementValues { get; set; }
        public virtual DbSet<ControlToolTip> ControlToolTips { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RoleObjectPrivilege> RoleObjectPrivileges { get; set; }
        public virtual DbSet<crChangeRequestWatcher> crChangeRequestWatchers { get; set; }
        public virtual DbSet<dtDefectTracking> dtDefectTrackings { get; set; }
        public virtual DbSet<dtPartDocument> dtPartDocuments { get; set; }
        public virtual DbSet<dtDefectTrackingDetail> dtDefectTrackingDetails { get; set; }
        public virtual DbSet<crDocument> crDocuments { get; set; }
        public virtual DbSet<Object> Objects { get; set; }
        public virtual DbSet<Privilege> Privileges { get; set; }
        public virtual DbSet<SupplierAssessment> SupplierAssessments { get; set; }
        public virtual DbSet<Detail> Details { get; set; }
        public virtual DbSet<PartAttachment> PartAttachments { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<Contacts1> Contacts1 { get; set; }
        public virtual DbSet<dqRawMaterial> dqRawMaterials { get; set; }
        public virtual DbSet<TriggerPoint> TriggerPoints { get; set; }
        public virtual DbSet<TriggerPointUser> TriggerPointUsers { get; set; }
        public virtual DbSet<DefectType> DefectTypes { get; set; }
        public virtual DbSet<CommoditySupplier> CommoditySuppliers { get; set; }
        public virtual DbSet<capaApproval> capaApprovals { get; set; }
        public virtual DbSet<capaApproverTitle> capaApproverTitles { get; set; }
        public virtual DbSet<capaFeedForward> capaFeedForwards { get; set; }
        public virtual DbSet<capaItemMaster> capaItemMasters { get; set; }
        public virtual DbSet<capaPartAffectedDetail> capaPartAffectedDetails { get; set; }
        public virtual DbSet<capaPermanentCountermeasure> capaPermanentCountermeasures { get; set; }
        public virtual DbSet<capaQuery> capaQueries { get; set; }
        public virtual DbSet<capaRootCauseWhyMade> capaRootCauseWhyMades { get; set; }
        public virtual DbSet<capaRootCauseWhyShipped> capaRootCauseWhyShippeds { get; set; }
        public virtual DbSet<capaTempCountermeasure> capaTempCountermeasures { get; set; }
        public virtual DbSet<capaVerification> capaVerifications { get; set; }
        public virtual DbSet<capaPartDocument> capaPartDocuments { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<NPIFDocusign> NPIFDocusigns { get; set; }
        public virtual DbSet<NPIFDocuSignApprover> NPIFDocuSignApprovers { get; set; }
        public virtual DbSet<RFQPriority> RFQPriorities { get; set; }
        public virtual DbSet<RFQ> RFQs { get; set; }
        public virtual DbSet<crItemMaster> crItemMasters { get; set; }
        public virtual DbSet<ItemMaster> ItemMasters { get; set; }
        public virtual DbSet<IndustryType> IndustryTypes { get; set; }
        public virtual DbSet<capaProblemDescription> capaProblemDescriptions { get; set; }
    
        public virtual ObjectResult<SearchDestinations_Result> SearchDestinations(string destination, string location, Nullable<bool> isWarehouse, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var destinationParameter = destination != null ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var isWarehouseParameter = isWarehouse.HasValue ?
                new ObjectParameter("IsWarehouse", isWarehouse) :
                new ObjectParameter("IsWarehouse", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchDestinations_Result>("SearchDestinations", destinationParameter, locationParameter, isWarehouseParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchProjectCategory_Result> SearchProjectCategory(string projectCategory, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var projectCategoryParameter = projectCategory != null ?
                new ObjectParameter("ProjectCategory", projectCategory) :
                new ObjectParameter("ProjectCategory", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchProjectCategory_Result>("SearchProjectCategory", projectCategoryParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchProjectStages_Result> SearchProjectStages(string projectStage, Nullable<int> projectCategoryId, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var projectStageParameter = projectStage != null ?
                new ObjectParameter("ProjectStage", projectStage) :
                new ObjectParameter("ProjectStage", typeof(string));
    
            var projectCategoryIdParameter = projectCategoryId.HasValue ?
                new ObjectParameter("ProjectCategoryId", projectCategoryId) :
                new ObjectParameter("ProjectCategoryId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchProjectStages_Result>("SearchProjectStages", projectStageParameter, projectCategoryIdParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchCoatingType_Result> SearchCoatingType(string coatingType, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var coatingTypeParameter = coatingType != null ?
                new ObjectParameter("CoatingType", coatingType) :
                new ObjectParameter("CoatingType", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchCoatingType_Result>("SearchCoatingType", coatingTypeParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchOrigins_Result> SearchOrigins(string origin, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var originParameter = origin != null ?
                new ObjectParameter("Origin", origin) :
                new ObjectParameter("Origin", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchOrigins_Result>("SearchOrigins", originParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchProcess_Result> SearchProcess(string process, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var processParameter = process != null ?
                new ObjectParameter("Process", process) :
                new ObjectParameter("Process", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchProcess_Result>("SearchProcess", processParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchRemarks_Result> SearchRemarks(string remark, Nullable<int> associatedToId, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var associatedToIdParameter = associatedToId.HasValue ?
                new ObjectParameter("AssociatedToId", associatedToId) :
                new ObjectParameter("AssociatedToId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchRemarks_Result>("SearchRemarks", remarkParameter, associatedToIdParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchRFQTypes_Result> SearchRFQTypes(string rFQType, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var rFQTypeParameter = rFQType != null ?
                new ObjectParameter("RFQType", rFQType) :
                new ObjectParameter("RFQType", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchRFQTypes_Result>("SearchRFQTypes", rFQTypeParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchDesignation_Result> SearchDesignation(string designation, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchDesignation_Result>("SearchDesignation", designationParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchForwarder_Result> SearchForwarder(string forwarderName, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var forwarderNameParameter = forwarderName != null ?
                new ObjectParameter("ForwarderName", forwarderName) :
                new ObjectParameter("ForwarderName", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchForwarder_Result>("SearchForwarder", forwarderNameParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchMachineDesc_Result> SearchMachineDesc(string machineDescription, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var machineDescriptionParameter = machineDescription != null ?
                new ObjectParameter("MachineDescription", machineDescription) :
                new ObjectParameter("MachineDescription", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchMachineDesc_Result>("SearchMachineDesc", machineDescriptionParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchMachiningDesc_Result> SearchMachiningDesc(string machiningDescription, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var machiningDescriptionParameter = machiningDescription != null ?
                new ObjectParameter("MachiningDescription", machiningDescription) :
                new ObjectParameter("MachiningDescription", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchMachiningDesc_Result>("SearchMachiningDesc", machiningDescriptionParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchCommodity_Result> SearchCommodity(string commodityName, Nullable<int> categoryId, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var commodityNameParameter = commodityName != null ?
                new ObjectParameter("CommodityName", commodityName) :
                new ObjectParameter("CommodityName", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchCommodity_Result>("SearchCommodity", commodityNameParameter, categoryIdParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchDocumentType_Result> SearchDocumentType(string documentType, Nullable<bool> isConfidential, Nullable<int> associatedToId, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var isConfidentialParameter = isConfidential.HasValue ?
                new ObjectParameter("IsConfidential", isConfidential) :
                new ObjectParameter("IsConfidential", typeof(bool));
    
            var associatedToIdParameter = associatedToId.HasValue ?
                new ObjectParameter("AssociatedToId", associatedToId) :
                new ObjectParameter("AssociatedToId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchDocumentType_Result>("SearchDocumentType", documentTypeParameter, isConfidentialParameter, associatedToIdParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchSecondaryOperationDescs_Result> SearchSecondaryOperationDescs(string secondaryOperationDesc, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var secondaryOperationDescParameter = secondaryOperationDesc != null ?
                new ObjectParameter("SecondaryOperationDesc", secondaryOperationDesc) :
                new ObjectParameter("SecondaryOperationDesc", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchSecondaryOperationDescs_Result>("SearchSecondaryOperationDescs", secondaryOperationDescParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchStatus_Result> SearchStatus(string status, Nullable<int> associatedToId, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var associatedToIdParameter = associatedToId.HasValue ?
                new ObjectParameter("AssociatedToId", associatedToId) :
                new ObjectParameter("AssociatedToId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchStatus_Result>("SearchStatus", statusParameter, associatedToIdParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchCommodityType_Result> SearchCommodityType(string commodityType, Nullable<int> supplierId, Nullable<int> customerId, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var commodityTypeParameter = commodityType != null ?
                new ObjectParameter("CommodityType", commodityType) :
                new ObjectParameter("CommodityType", typeof(string));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchCommodityType_Result>("SearchCommodityType", commodityTypeParameter, supplierIdParameter, customerIdParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchTriggerPoint_Result> SearchTriggerPoint(string triggerPoint, string userId, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var triggerPointParameter = triggerPoint != null ?
                new ObjectParameter("TriggerPoint", triggerPoint) :
                new ObjectParameter("TriggerPoint", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchTriggerPoint_Result>("SearchTriggerPoint", triggerPointParameter, userIdParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchEmailTemplate_Result> SearchEmailTemplate(string title, string emailSubject, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var emailSubjectParameter = emailSubject != null ?
                new ObjectParameter("EmailSubject", emailSubject) :
                new ObjectParameter("EmailSubject", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchEmailTemplate_Result>("SearchEmailTemplate", titleParameter, emailSubjectParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<GetLogDetails_Result> GetLogDetails(Nullable<int> itemId, string tableName, string schemaName, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var schemaNameParameter = schemaName != null ?
                new ObjectParameter("SchemaName", schemaName) :
                new ObjectParameter("SchemaName", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLogDetails_Result>("GetLogDetails", itemIdParameter, tableNameParameter, schemaNameParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchSuppliers_Result> SearchSuppliers(string companyName, string city, string state, string website, string companyPhone1, Nullable<short> status, string commodityIds, Nullable<short> workQualityRating, Nullable<short> timelineRating, Nullable<short> costingRating, Nullable<bool> isCurrentSupplier, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var companyPhone1Parameter = companyPhone1 != null ?
                new ObjectParameter("CompanyPhone1", companyPhone1) :
                new ObjectParameter("CompanyPhone1", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(short));
    
            var commodityIdsParameter = commodityIds != null ?
                new ObjectParameter("CommodityIds", commodityIds) :
                new ObjectParameter("CommodityIds", typeof(string));
    
            var workQualityRatingParameter = workQualityRating.HasValue ?
                new ObjectParameter("WorkQualityRating", workQualityRating) :
                new ObjectParameter("WorkQualityRating", typeof(short));
    
            var timelineRatingParameter = timelineRating.HasValue ?
                new ObjectParameter("TimelineRating", timelineRating) :
                new ObjectParameter("TimelineRating", typeof(short));
    
            var costingRatingParameter = costingRating.HasValue ?
                new ObjectParameter("CostingRating", costingRating) :
                new ObjectParameter("CostingRating", typeof(short));
    
            var isCurrentSupplierParameter = isCurrentSupplier.HasValue ?
                new ObjectParameter("IsCurrentSupplier", isCurrentSupplier) :
                new ObjectParameter("IsCurrentSupplier", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchSuppliers_Result>("SearchSuppliers", companyNameParameter, cityParameter, stateParameter, websiteParameter, companyPhone1Parameter, statusParameter, commodityIdsParameter, workQualityRatingParameter, timelineRatingParameter, costingRatingParameter, isCurrentSupplierParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchUsers_Result> SearchUsers(string userName, string firstName, string lastName, Nullable<bool> isActive, Nullable<int> roleId, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchUsers_Result>("SearchUsers", userNameParameter, firstNameParameter, lastNameParameter, isActiveParameter, roleIdParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<GetUserInfo_Result> GetUserInfo(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserInfo_Result>("GetUserInfo", idParameter);
        }
    
        public virtual int DeleteMultipleContact(string contactIds, string currentUser, ObjectParameter result)
        {
            var contactIdsParameter = contactIds != null ?
                new ObjectParameter("ContactIds", contactIds) :
                new ObjectParameter("ContactIds", typeof(string));
    
            var currentUserParameter = currentUser != null ?
                new ObjectParameter("CurrentUser", currentUser) :
                new ObjectParameter("CurrentUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMultipleContact", contactIdsParameter, currentUserParameter, result);
        }
    
        public virtual int InsertUserDesignations(string id, string designationIds, string loginBy)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var designationIdsParameter = designationIds != null ?
                new ObjectParameter("DesignationIds", designationIds) :
                new ObjectParameter("DesignationIds", typeof(string));
    
            var loginByParameter = loginBy != null ?
                new ObjectParameter("LoginBy", loginBy) :
                new ObjectParameter("LoginBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserDesignations", idParameter, designationIdsParameter, loginByParameter);
        }
    
        public virtual int DeleteMultipleSupplier(string supplierIds, string currentUser, ObjectParameter result)
        {
            var supplierIdsParameter = supplierIds != null ?
                new ObjectParameter("SupplierIds", supplierIds) :
                new ObjectParameter("SupplierIds", typeof(string));
    
            var currentUserParameter = currentUser != null ?
                new ObjectParameter("CurrentUser", currentUser) :
                new ObjectParameter("CurrentUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMultipleSupplier", supplierIdsParameter, currentUserParameter, result);
        }
    
        public virtual int DeleteMultipleCustomer(string customerIds, string currentUser, ObjectParameter result)
        {
            var customerIdsParameter = customerIds != null ?
                new ObjectParameter("CustomerIds", customerIds) :
                new ObjectParameter("CustomerIds", typeof(string));
    
            var currentUserParameter = currentUser != null ?
                new ObjectParameter("CurrentUser", currentUser) :
                new ObjectParameter("CurrentUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMultipleCustomer", customerIdsParameter, currentUserParameter, result);
        }
    
        public virtual int DeleteMultipleCustomerContact(string contactIds, string currentUser, ObjectParameter result)
        {
            var contactIdsParameter = contactIds != null ?
                new ObjectParameter("ContactIds", contactIds) :
                new ObjectParameter("ContactIds", typeof(string));
    
            var currentUserParameter = currentUser != null ?
                new ObjectParameter("CurrentUser", currentUser) :
                new ObjectParameter("CurrentUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMultipleCustomerContact", contactIdsParameter, currentUserParameter, result);
        }
    
        public virtual ObjectResult<SearchCustomers_Result> SearchCustomers(string companyName, string city, string state, string website, string companyPhone1, Nullable<short> paymentRating, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var companyPhone1Parameter = companyPhone1 != null ?
                new ObjectParameter("CompanyPhone1", companyPhone1) :
                new ObjectParameter("CompanyPhone1", typeof(string));
    
            var paymentRatingParameter = paymentRating.HasValue ?
                new ObjectParameter("PaymentRating", paymentRating) :
                new ObjectParameter("PaymentRating", typeof(short));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchCustomers_Result>("SearchCustomers", companyNameParameter, cityParameter, stateParameter, websiteParameter, companyPhone1Parameter, paymentRatingParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual int DeleteMultipleCustomerDivision(string divisionIds, string currentUser, ObjectParameter result)
        {
            var divisionIdsParameter = divisionIds != null ?
                new ObjectParameter("DivisionIds", divisionIds) :
                new ObjectParameter("DivisionIds", typeof(string));
    
            var currentUserParameter = currentUser != null ?
                new ObjectParameter("CurrentUser", currentUser) :
                new ObjectParameter("CurrentUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMultipleCustomerDivision", divisionIdsParameter, currentUserParameter, result);
        }
    
        public virtual ObjectResult<SearchShipments_Result> SearchShipments(Nullable<int> id, Nullable<bool> lateDeliveryToForwarder, Nullable<short> shipmentMode, Nullable<int> supplierId, Nullable<short> originId, Nullable<short> forwarderId, Nullable<short> qualityReviewStatus, Nullable<bool> status, string pONumber, string partNumber, string inspector, Nullable<System.DateTime> estShpmntDateFrom, Nullable<System.DateTime> estShpmntDateTo, Nullable<System.DateTime> eTAAtWarehouseAtDestFrom, Nullable<System.DateTime> eTAAtWarehouseAtDestTo, Nullable<System.DateTime> actArrDateAtWarehouseAtDestFrom, Nullable<System.DateTime> actArrDateAtWarehouseAtDestTo, Nullable<System.DateTime> inspectionDateFrom, Nullable<System.DateTime> inspectionDateTo, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var lateDeliveryToForwarderParameter = lateDeliveryToForwarder.HasValue ?
                new ObjectParameter("LateDeliveryToForwarder", lateDeliveryToForwarder) :
                new ObjectParameter("LateDeliveryToForwarder", typeof(bool));
    
            var shipmentModeParameter = shipmentMode.HasValue ?
                new ObjectParameter("ShipmentMode", shipmentMode) :
                new ObjectParameter("ShipmentMode", typeof(short));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var originIdParameter = originId.HasValue ?
                new ObjectParameter("OriginId", originId) :
                new ObjectParameter("OriginId", typeof(short));
    
            var forwarderIdParameter = forwarderId.HasValue ?
                new ObjectParameter("ForwarderId", forwarderId) :
                new ObjectParameter("ForwarderId", typeof(short));
    
            var qualityReviewStatusParameter = qualityReviewStatus.HasValue ?
                new ObjectParameter("QualityReviewStatus", qualityReviewStatus) :
                new ObjectParameter("QualityReviewStatus", typeof(short));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var inspectorParameter = inspector != null ?
                new ObjectParameter("Inspector", inspector) :
                new ObjectParameter("Inspector", typeof(string));
    
            var estShpmntDateFromParameter = estShpmntDateFrom.HasValue ?
                new ObjectParameter("EstShpmntDateFrom", estShpmntDateFrom) :
                new ObjectParameter("EstShpmntDateFrom", typeof(System.DateTime));
    
            var estShpmntDateToParameter = estShpmntDateTo.HasValue ?
                new ObjectParameter("EstShpmntDateTo", estShpmntDateTo) :
                new ObjectParameter("EstShpmntDateTo", typeof(System.DateTime));
    
            var eTAAtWarehouseAtDestFromParameter = eTAAtWarehouseAtDestFrom.HasValue ?
                new ObjectParameter("ETAAtWarehouseAtDestFrom", eTAAtWarehouseAtDestFrom) :
                new ObjectParameter("ETAAtWarehouseAtDestFrom", typeof(System.DateTime));
    
            var eTAAtWarehouseAtDestToParameter = eTAAtWarehouseAtDestTo.HasValue ?
                new ObjectParameter("ETAAtWarehouseAtDestTo", eTAAtWarehouseAtDestTo) :
                new ObjectParameter("ETAAtWarehouseAtDestTo", typeof(System.DateTime));
    
            var actArrDateAtWarehouseAtDestFromParameter = actArrDateAtWarehouseAtDestFrom.HasValue ?
                new ObjectParameter("ActArrDateAtWarehouseAtDestFrom", actArrDateAtWarehouseAtDestFrom) :
                new ObjectParameter("ActArrDateAtWarehouseAtDestFrom", typeof(System.DateTime));
    
            var actArrDateAtWarehouseAtDestToParameter = actArrDateAtWarehouseAtDestTo.HasValue ?
                new ObjectParameter("ActArrDateAtWarehouseAtDestTo", actArrDateAtWarehouseAtDestTo) :
                new ObjectParameter("ActArrDateAtWarehouseAtDestTo", typeof(System.DateTime));
    
            var inspectionDateFromParameter = inspectionDateFrom.HasValue ?
                new ObjectParameter("InspectionDateFrom", inspectionDateFrom) :
                new ObjectParameter("InspectionDateFrom", typeof(System.DateTime));
    
            var inspectionDateToParameter = inspectionDateTo.HasValue ?
                new ObjectParameter("InspectionDateTo", inspectionDateTo) :
                new ObjectParameter("InspectionDateTo", typeof(System.DateTime));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchShipments_Result>("SearchShipments", idParameter, lateDeliveryToForwarderParameter, shipmentModeParameter, supplierIdParameter, originIdParameter, forwarderIdParameter, qualityReviewStatusParameter, statusParameter, pONumberParameter, partNumberParameter, inspectorParameter, estShpmntDateFromParameter, estShpmntDateToParameter, eTAAtWarehouseAtDestFromParameter, eTAAtWarehouseAtDestToParameter, actArrDateAtWarehouseAtDestFromParameter, actArrDateAtWarehouseAtDestToParameter, inspectionDateFromParameter, inspectionDateToParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchRFQs_Result> SearchRFQs(string rFQId, string companyName, string contactFullName, string projectName, string workType, string partNumber, string rFQCoordinator, string rFQSource, string process, string commodity, string sAM, string rFQPriority, string partDescription, Nullable<System.DateTime> rFQDateFrom, Nullable<System.DateTime> rFQDateTo, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var rFQIdParameter = rFQId != null ?
                new ObjectParameter("RFQId", rFQId) :
                new ObjectParameter("RFQId", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var contactFullNameParameter = contactFullName != null ?
                new ObjectParameter("ContactFullName", contactFullName) :
                new ObjectParameter("ContactFullName", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var workTypeParameter = workType != null ?
                new ObjectParameter("WorkType", workType) :
                new ObjectParameter("WorkType", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var rFQCoordinatorParameter = rFQCoordinator != null ?
                new ObjectParameter("RFQCoordinator", rFQCoordinator) :
                new ObjectParameter("RFQCoordinator", typeof(string));
    
            var rFQSourceParameter = rFQSource != null ?
                new ObjectParameter("RFQSource", rFQSource) :
                new ObjectParameter("RFQSource", typeof(string));
    
            var processParameter = process != null ?
                new ObjectParameter("Process", process) :
                new ObjectParameter("Process", typeof(string));
    
            var commodityParameter = commodity != null ?
                new ObjectParameter("Commodity", commodity) :
                new ObjectParameter("Commodity", typeof(string));
    
            var sAMParameter = sAM != null ?
                new ObjectParameter("SAM", sAM) :
                new ObjectParameter("SAM", typeof(string));
    
            var rFQPriorityParameter = rFQPriority != null ?
                new ObjectParameter("RFQPriority", rFQPriority) :
                new ObjectParameter("RFQPriority", typeof(string));
    
            var partDescriptionParameter = partDescription != null ?
                new ObjectParameter("PartDescription", partDescription) :
                new ObjectParameter("PartDescription", typeof(string));
    
            var rFQDateFromParameter = rFQDateFrom.HasValue ?
                new ObjectParameter("RFQDateFrom", rFQDateFrom) :
                new ObjectParameter("RFQDateFrom", typeof(System.DateTime));
    
            var rFQDateToParameter = rFQDateTo.HasValue ?
                new ObjectParameter("RFQDateTo", rFQDateTo) :
                new ObjectParameter("RFQDateTo", typeof(System.DateTime));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchRFQs_Result>("SearchRFQs", rFQIdParameter, companyNameParameter, contactFullNameParameter, projectNameParameter, workTypeParameter, partNumberParameter, rFQCoordinatorParameter, rFQSourceParameter, processParameter, commodityParameter, sAMParameter, rFQPriorityParameter, partDescriptionParameter, rFQDateFromParameter, rFQDateToParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual int SaveRFQ(string action, string pRfqId, Nullable<int> customerId, Nullable<int> customerContactId, Nullable<System.DateTime> date, string currency, string otherAssumption, Nullable<int> nonAwardFeedbackId, string nonAwardDetailedFeedback, string remarks, string rfqFilePath, string rfqFileName, string projectName, Nullable<System.DateTime> quoteDueDate, string status, string sAMId, Nullable<int> processId, Nullable<int> commodityId, Nullable<short> commodityTypeId, string rFQCoordinatorId, Nullable<int> rFQSourceId, Nullable<int> rFQTypeId, string supplierRequirement, Nullable<short> rFQPriorityId, Nullable<short> industryTypeId, string createdBy, string updatedBy, ObjectParameter rfqId)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var pRfqIdParameter = pRfqId != null ?
                new ObjectParameter("pRfqId", pRfqId) :
                new ObjectParameter("pRfqId", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var customerContactIdParameter = customerContactId.HasValue ?
                new ObjectParameter("CustomerContactId", customerContactId) :
                new ObjectParameter("CustomerContactId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var otherAssumptionParameter = otherAssumption != null ?
                new ObjectParameter("OtherAssumption", otherAssumption) :
                new ObjectParameter("OtherAssumption", typeof(string));
    
            var nonAwardFeedbackIdParameter = nonAwardFeedbackId.HasValue ?
                new ObjectParameter("NonAwardFeedbackId", nonAwardFeedbackId) :
                new ObjectParameter("NonAwardFeedbackId", typeof(int));
    
            var nonAwardDetailedFeedbackParameter = nonAwardDetailedFeedback != null ?
                new ObjectParameter("NonAwardDetailedFeedback", nonAwardDetailedFeedback) :
                new ObjectParameter("NonAwardDetailedFeedback", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var rfqFilePathParameter = rfqFilePath != null ?
                new ObjectParameter("RfqFilePath", rfqFilePath) :
                new ObjectParameter("RfqFilePath", typeof(string));
    
            var rfqFileNameParameter = rfqFileName != null ?
                new ObjectParameter("RfqFileName", rfqFileName) :
                new ObjectParameter("RfqFileName", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var quoteDueDateParameter = quoteDueDate.HasValue ?
                new ObjectParameter("QuoteDueDate", quoteDueDate) :
                new ObjectParameter("QuoteDueDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var sAMIdParameter = sAMId != null ?
                new ObjectParameter("SAMId", sAMId) :
                new ObjectParameter("SAMId", typeof(string));
    
            var processIdParameter = processId.HasValue ?
                new ObjectParameter("ProcessId", processId) :
                new ObjectParameter("ProcessId", typeof(int));
    
            var commodityIdParameter = commodityId.HasValue ?
                new ObjectParameter("CommodityId", commodityId) :
                new ObjectParameter("CommodityId", typeof(int));
    
            var commodityTypeIdParameter = commodityTypeId.HasValue ?
                new ObjectParameter("CommodityTypeId", commodityTypeId) :
                new ObjectParameter("CommodityTypeId", typeof(short));
    
            var rFQCoordinatorIdParameter = rFQCoordinatorId != null ?
                new ObjectParameter("RFQCoordinatorId", rFQCoordinatorId) :
                new ObjectParameter("RFQCoordinatorId", typeof(string));
    
            var rFQSourceIdParameter = rFQSourceId.HasValue ?
                new ObjectParameter("RFQSourceId", rFQSourceId) :
                new ObjectParameter("RFQSourceId", typeof(int));
    
            var rFQTypeIdParameter = rFQTypeId.HasValue ?
                new ObjectParameter("RFQTypeId", rFQTypeId) :
                new ObjectParameter("RFQTypeId", typeof(int));
    
            var supplierRequirementParameter = supplierRequirement != null ?
                new ObjectParameter("SupplierRequirement", supplierRequirement) :
                new ObjectParameter("SupplierRequirement", typeof(string));
    
            var rFQPriorityIdParameter = rFQPriorityId.HasValue ?
                new ObjectParameter("RFQPriorityId", rFQPriorityId) :
                new ObjectParameter("RFQPriorityId", typeof(short));
    
            var industryTypeIdParameter = industryTypeId.HasValue ?
                new ObjectParameter("IndustryTypeId", industryTypeId) :
                new ObjectParameter("IndustryTypeId", typeof(short));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveRFQ", actionParameter, pRfqIdParameter, customerIdParameter, customerContactIdParameter, dateParameter, currencyParameter, otherAssumptionParameter, nonAwardFeedbackIdParameter, nonAwardDetailedFeedbackParameter, remarksParameter, rfqFilePathParameter, rfqFileNameParameter, projectNameParameter, quoteDueDateParameter, statusParameter, sAMIdParameter, processIdParameter, commodityIdParameter, commodityTypeIdParameter, rFQCoordinatorIdParameter, rFQSourceIdParameter, rFQTypeIdParameter, supplierRequirementParameter, rFQPriorityIdParameter, industryTypeIdParameter, createdByParameter, updatedByParameter, rfqId);
        }
    
        public virtual int InsertRFQSupplierPartQuote(Nullable<int> rFQSupplierId, Nullable<int> rFQPartId, Nullable<int> manufacturerId, Nullable<decimal> materialCost, Nullable<decimal> processCost, Nullable<decimal> unitPrice, Nullable<decimal> toolingCost, string currency, string rawMaterialPriceAssumed, string quoteAttachmentFilePath, Nullable<decimal> machiningCost, Nullable<decimal> otherProcessCost, string remarks, string supplierToolingLeadtime, string toolingWarranty, Nullable<int> noOfCavities, Nullable<int> minOrderQty, Nullable<bool> mOQConfirmation, string manufacturer, Nullable<decimal> exchangeRate, string createdBy, Nullable<System.DateTime> createdDate, string updatedBy, Nullable<System.DateTime> updatedDate, ObjectParameter rFQSupplierPartQuoteId)
        {
            var rFQSupplierIdParameter = rFQSupplierId.HasValue ?
                new ObjectParameter("RFQSupplierId", rFQSupplierId) :
                new ObjectParameter("RFQSupplierId", typeof(int));
    
            var rFQPartIdParameter = rFQPartId.HasValue ?
                new ObjectParameter("RFQPartId", rFQPartId) :
                new ObjectParameter("RFQPartId", typeof(int));
    
            var manufacturerIdParameter = manufacturerId.HasValue ?
                new ObjectParameter("ManufacturerId", manufacturerId) :
                new ObjectParameter("ManufacturerId", typeof(int));
    
            var materialCostParameter = materialCost.HasValue ?
                new ObjectParameter("MaterialCost", materialCost) :
                new ObjectParameter("MaterialCost", typeof(decimal));
    
            var processCostParameter = processCost.HasValue ?
                new ObjectParameter("ProcessCost", processCost) :
                new ObjectParameter("ProcessCost", typeof(decimal));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var toolingCostParameter = toolingCost.HasValue ?
                new ObjectParameter("ToolingCost", toolingCost) :
                new ObjectParameter("ToolingCost", typeof(decimal));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var rawMaterialPriceAssumedParameter = rawMaterialPriceAssumed != null ?
                new ObjectParameter("RawMaterialPriceAssumed", rawMaterialPriceAssumed) :
                new ObjectParameter("RawMaterialPriceAssumed", typeof(string));
    
            var quoteAttachmentFilePathParameter = quoteAttachmentFilePath != null ?
                new ObjectParameter("QuoteAttachmentFilePath", quoteAttachmentFilePath) :
                new ObjectParameter("QuoteAttachmentFilePath", typeof(string));
    
            var machiningCostParameter = machiningCost.HasValue ?
                new ObjectParameter("MachiningCost", machiningCost) :
                new ObjectParameter("MachiningCost", typeof(decimal));
    
            var otherProcessCostParameter = otherProcessCost.HasValue ?
                new ObjectParameter("OtherProcessCost", otherProcessCost) :
                new ObjectParameter("OtherProcessCost", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var supplierToolingLeadtimeParameter = supplierToolingLeadtime != null ?
                new ObjectParameter("SupplierToolingLeadtime", supplierToolingLeadtime) :
                new ObjectParameter("SupplierToolingLeadtime", typeof(string));
    
            var toolingWarrantyParameter = toolingWarranty != null ?
                new ObjectParameter("ToolingWarranty", toolingWarranty) :
                new ObjectParameter("ToolingWarranty", typeof(string));
    
            var noOfCavitiesParameter = noOfCavities.HasValue ?
                new ObjectParameter("NoOfCavities", noOfCavities) :
                new ObjectParameter("NoOfCavities", typeof(int));
    
            var minOrderQtyParameter = minOrderQty.HasValue ?
                new ObjectParameter("MinOrderQty", minOrderQty) :
                new ObjectParameter("MinOrderQty", typeof(int));
    
            var mOQConfirmationParameter = mOQConfirmation.HasValue ?
                new ObjectParameter("MOQConfirmation", mOQConfirmation) :
                new ObjectParameter("MOQConfirmation", typeof(bool));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("Manufacturer", manufacturer) :
                new ObjectParameter("Manufacturer", typeof(string));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("ExchangeRate", exchangeRate) :
                new ObjectParameter("ExchangeRate", typeof(decimal));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRFQSupplierPartQuote", rFQSupplierIdParameter, rFQPartIdParameter, manufacturerIdParameter, materialCostParameter, processCostParameter, unitPriceParameter, toolingCostParameter, currencyParameter, rawMaterialPriceAssumedParameter, quoteAttachmentFilePathParameter, machiningCostParameter, otherProcessCostParameter, remarksParameter, supplierToolingLeadtimeParameter, toolingWarrantyParameter, noOfCavitiesParameter, minOrderQtyParameter, mOQConfirmationParameter, manufacturerParameter, exchangeRateParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, rFQSupplierPartQuoteId);
        }
    
        public virtual ObjectResult<SearchSupplierPartToSubmitQuote_Result> SearchSupplierPartToSubmitQuote(string uniqueUrl)
        {
            var uniqueUrlParameter = uniqueUrl != null ?
                new ObjectParameter("UniqueUrl", uniqueUrl) :
                new ObjectParameter("UniqueUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchSupplierPartToSubmitQuote_Result>("SearchSupplierPartToSubmitQuote", uniqueUrlParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetSupplierPartQuoteCount(string rfqId, ObjectParameter totalRecords)
        {
            var rfqIdParameter = rfqId != null ?
                new ObjectParameter("RfqId", rfqId) :
                new ObjectParameter("RfqId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetSupplierPartQuoteCount", rfqIdParameter, totalRecords);
        }
    
        public virtual ObjectResult<SearchSupplierPartToSubmitDetailQuote_Result> SearchSupplierPartToSubmitDetailQuote(string uniqueUrl)
        {
            var uniqueUrlParameter = uniqueUrl != null ?
                new ObjectParameter("UniqueUrl", uniqueUrl) :
                new ObjectParameter("UniqueUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchSupplierPartToSubmitDetailQuote_Result>("SearchSupplierPartToSubmitDetailQuote", uniqueUrlParameter);
        }
    
        public virtual int InsertRFQSupplierPartQuoteDQ(Nullable<int> id, Nullable<int> rFQSupplierId, Nullable<int> rFQPartId, Nullable<int> manufacturerId, Nullable<decimal> materialCost, Nullable<decimal> processCost, Nullable<decimal> unitPrice, Nullable<decimal> toolingCost, string currency, string rawMaterialPriceAssumed, string quoteAttachmentFilePath, Nullable<decimal> machiningCost, Nullable<decimal> otherProcessCost, string remarks, string supplierToolingLeadtime, string toolingWarranty, Nullable<int> noOfCavities, Nullable<int> minOrderQty, Nullable<bool> mOQConfirmation, string manufacturer, Nullable<decimal> exchangeRate, string createdBy, Nullable<System.DateTime> createdDate, string updatedBy, Nullable<System.DateTime> updatedDate, ObjectParameter rFQSupplierPartQuoteId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var rFQSupplierIdParameter = rFQSupplierId.HasValue ?
                new ObjectParameter("RFQSupplierId", rFQSupplierId) :
                new ObjectParameter("RFQSupplierId", typeof(int));
    
            var rFQPartIdParameter = rFQPartId.HasValue ?
                new ObjectParameter("RFQPartId", rFQPartId) :
                new ObjectParameter("RFQPartId", typeof(int));
    
            var manufacturerIdParameter = manufacturerId.HasValue ?
                new ObjectParameter("ManufacturerId", manufacturerId) :
                new ObjectParameter("ManufacturerId", typeof(int));
    
            var materialCostParameter = materialCost.HasValue ?
                new ObjectParameter("MaterialCost", materialCost) :
                new ObjectParameter("MaterialCost", typeof(decimal));
    
            var processCostParameter = processCost.HasValue ?
                new ObjectParameter("ProcessCost", processCost) :
                new ObjectParameter("ProcessCost", typeof(decimal));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var toolingCostParameter = toolingCost.HasValue ?
                new ObjectParameter("ToolingCost", toolingCost) :
                new ObjectParameter("ToolingCost", typeof(decimal));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var rawMaterialPriceAssumedParameter = rawMaterialPriceAssumed != null ?
                new ObjectParameter("RawMaterialPriceAssumed", rawMaterialPriceAssumed) :
                new ObjectParameter("RawMaterialPriceAssumed", typeof(string));
    
            var quoteAttachmentFilePathParameter = quoteAttachmentFilePath != null ?
                new ObjectParameter("QuoteAttachmentFilePath", quoteAttachmentFilePath) :
                new ObjectParameter("QuoteAttachmentFilePath", typeof(string));
    
            var machiningCostParameter = machiningCost.HasValue ?
                new ObjectParameter("MachiningCost", machiningCost) :
                new ObjectParameter("MachiningCost", typeof(decimal));
    
            var otherProcessCostParameter = otherProcessCost.HasValue ?
                new ObjectParameter("OtherProcessCost", otherProcessCost) :
                new ObjectParameter("OtherProcessCost", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var supplierToolingLeadtimeParameter = supplierToolingLeadtime != null ?
                new ObjectParameter("SupplierToolingLeadtime", supplierToolingLeadtime) :
                new ObjectParameter("SupplierToolingLeadtime", typeof(string));
    
            var toolingWarrantyParameter = toolingWarranty != null ?
                new ObjectParameter("ToolingWarranty", toolingWarranty) :
                new ObjectParameter("ToolingWarranty", typeof(string));
    
            var noOfCavitiesParameter = noOfCavities.HasValue ?
                new ObjectParameter("NoOfCavities", noOfCavities) :
                new ObjectParameter("NoOfCavities", typeof(int));
    
            var minOrderQtyParameter = minOrderQty.HasValue ?
                new ObjectParameter("MinOrderQty", minOrderQty) :
                new ObjectParameter("MinOrderQty", typeof(int));
    
            var mOQConfirmationParameter = mOQConfirmation.HasValue ?
                new ObjectParameter("MOQConfirmation", mOQConfirmation) :
                new ObjectParameter("MOQConfirmation", typeof(bool));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("Manufacturer", manufacturer) :
                new ObjectParameter("Manufacturer", typeof(string));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("ExchangeRate", exchangeRate) :
                new ObjectParameter("ExchangeRate", typeof(decimal));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRFQSupplierPartQuoteDQ", idParameter, rFQSupplierIdParameter, rFQPartIdParameter, manufacturerIdParameter, materialCostParameter, processCostParameter, unitPriceParameter, toolingCostParameter, currencyParameter, rawMaterialPriceAssumedParameter, quoteAttachmentFilePathParameter, machiningCostParameter, otherProcessCostParameter, remarksParameter, supplierToolingLeadtimeParameter, toolingWarrantyParameter, noOfCavitiesParameter, minOrderQtyParameter, mOQConfirmationParameter, manufacturerParameter, exchangeRateParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, rFQSupplierPartQuoteId);
        }
    
        public virtual ObjectResult<GetRfqSupplierPartsQuote_Result> GetRfqSupplierPartsQuote(string rfqId)
        {
            var rfqIdParameter = rfqId != null ?
                new ObjectParameter("RfqId", rfqId) :
                new ObjectParameter("RfqId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRfqSupplierPartsQuote_Result>("GetRfqSupplierPartsQuote", rfqIdParameter);
        }
    
        public virtual ObjectResult<SearchSupplierPartForSupplierQuote_Result> SearchSupplierPartForSupplierQuote(string rfqId, Nullable<int> supplierId)
        {
            var rfqIdParameter = rfqId != null ?
                new ObjectParameter("RfqId", rfqId) :
                new ObjectParameter("RfqId", typeof(string));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchSupplierPartForSupplierQuote_Result>("SearchSupplierPartForSupplierQuote", rfqIdParameter, supplierIdParameter);
        }
    
        public virtual ObjectResult<SearchQuotes_Result> SearchQuotes(string quoteId, string rFQId, string customerName, string contactFullName, string rFQCoordinator, string sAM, Nullable<System.DateTime> quoteDateFrom, Nullable<System.DateTime> quoteDateTo, string partNumber, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var quoteIdParameter = quoteId != null ?
                new ObjectParameter("QuoteId", quoteId) :
                new ObjectParameter("QuoteId", typeof(string));
    
            var rFQIdParameter = rFQId != null ?
                new ObjectParameter("RFQId", rFQId) :
                new ObjectParameter("RFQId", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var contactFullNameParameter = contactFullName != null ?
                new ObjectParameter("ContactFullName", contactFullName) :
                new ObjectParameter("ContactFullName", typeof(string));
    
            var rFQCoordinatorParameter = rFQCoordinator != null ?
                new ObjectParameter("RFQCoordinator", rFQCoordinator) :
                new ObjectParameter("RFQCoordinator", typeof(string));
    
            var sAMParameter = sAM != null ?
                new ObjectParameter("SAM", sAM) :
                new ObjectParameter("SAM", typeof(string));
    
            var quoteDateFromParameter = quoteDateFrom.HasValue ?
                new ObjectParameter("QuoteDateFrom", quoteDateFrom) :
                new ObjectParameter("QuoteDateFrom", typeof(System.DateTime));
    
            var quoteDateToParameter = quoteDateTo.HasValue ?
                new ObjectParameter("QuoteDateTo", quoteDateTo) :
                new ObjectParameter("QuoteDateTo", typeof(System.DateTime));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchQuotes_Result>("SearchQuotes", quoteIdParameter, rFQIdParameter, customerNameParameter, contactFullNameParameter, rFQCoordinatorParameter, sAMParameter, quoteDateFromParameter, quoteDateToParameter, partNumberParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<GetRemarksLookup_Result> GetRemarksLookup(Nullable<int> associatedToId)
        {
            var associatedToIdParameter = associatedToId.HasValue ?
                new ObjectParameter("AssociatedToId", associatedToId) :
                new ObjectParameter("AssociatedToId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRemarksLookup_Result>("GetRemarksLookup", associatedToIdParameter);
        }
    
        public virtual ObjectResult<GetPartsToQuote_Result> GetPartsToQuote(string rfqId)
        {
            var rfqIdParameter = rfqId != null ?
                new ObjectParameter("RfqId", rfqId) :
                new ObjectParameter("RfqId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPartsToQuote_Result>("GetPartsToQuote", rfqIdParameter);
        }
    
        public virtual ObjectResult<GetQuoteDetails_Result> GetQuoteDetails(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuoteDetails_Result>("GetQuoteDetails", idParameter);
        }
    
        public virtual ObjectResult<SearchSupplierPartForSupplierQuoteHistory_Result> SearchSupplierPartForSupplierQuoteHistory(string rfqId, Nullable<int> supplierId)
        {
            var rfqIdParameter = rfqId != null ?
                new ObjectParameter("RfqId", rfqId) :
                new ObjectParameter("RfqId", typeof(string));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchSupplierPartForSupplierQuoteHistory_Result>("SearchSupplierPartForSupplierQuoteHistory", rfqIdParameter, supplierIdParameter);
        }
    
        public virtual int InsertQuote(string quoteNumber, string pQuoteId, string rFQId, string sAMId, string generalAssumption, Nullable<bool> revision, string loginBy, Nullable<decimal> customDutiesPercent, Nullable<decimal> salesCommissionPercent, Nullable<decimal> sGAProfitPercent, Nullable<decimal> shippingCostPercent, Nullable<decimal> supplierCost, Nullable<decimal> warehousingPercent, Nullable<decimal> toolingCostPercent, string shippingCostCalMethod, Nullable<short> statusId, Nullable<decimal> amountWon, Nullable<decimal> amount, string quoteFilePath, string extQuoteFilePath, string mESComments, ObjectParameter errorNumber, ObjectParameter quoteId)
        {
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var pQuoteIdParameter = pQuoteId != null ?
                new ObjectParameter("pQuoteId", pQuoteId) :
                new ObjectParameter("pQuoteId", typeof(string));
    
            var rFQIdParameter = rFQId != null ?
                new ObjectParameter("RFQId", rFQId) :
                new ObjectParameter("RFQId", typeof(string));
    
            var sAMIdParameter = sAMId != null ?
                new ObjectParameter("SAMId", sAMId) :
                new ObjectParameter("SAMId", typeof(string));
    
            var generalAssumptionParameter = generalAssumption != null ?
                new ObjectParameter("GeneralAssumption", generalAssumption) :
                new ObjectParameter("GeneralAssumption", typeof(string));
    
            var revisionParameter = revision.HasValue ?
                new ObjectParameter("Revision", revision) :
                new ObjectParameter("Revision", typeof(bool));
    
            var loginByParameter = loginBy != null ?
                new ObjectParameter("LoginBy", loginBy) :
                new ObjectParameter("LoginBy", typeof(string));
    
            var customDutiesPercentParameter = customDutiesPercent.HasValue ?
                new ObjectParameter("CustomDutiesPercent", customDutiesPercent) :
                new ObjectParameter("CustomDutiesPercent", typeof(decimal));
    
            var salesCommissionPercentParameter = salesCommissionPercent.HasValue ?
                new ObjectParameter("SalesCommissionPercent", salesCommissionPercent) :
                new ObjectParameter("SalesCommissionPercent", typeof(decimal));
    
            var sGAProfitPercentParameter = sGAProfitPercent.HasValue ?
                new ObjectParameter("SGAProfitPercent", sGAProfitPercent) :
                new ObjectParameter("SGAProfitPercent", typeof(decimal));
    
            var shippingCostPercentParameter = shippingCostPercent.HasValue ?
                new ObjectParameter("ShippingCostPercent", shippingCostPercent) :
                new ObjectParameter("ShippingCostPercent", typeof(decimal));
    
            var supplierCostParameter = supplierCost.HasValue ?
                new ObjectParameter("SupplierCost", supplierCost) :
                new ObjectParameter("SupplierCost", typeof(decimal));
    
            var warehousingPercentParameter = warehousingPercent.HasValue ?
                new ObjectParameter("WarehousingPercent", warehousingPercent) :
                new ObjectParameter("WarehousingPercent", typeof(decimal));
    
            var toolingCostPercentParameter = toolingCostPercent.HasValue ?
                new ObjectParameter("ToolingCostPercent", toolingCostPercent) :
                new ObjectParameter("ToolingCostPercent", typeof(decimal));
    
            var shippingCostCalMethodParameter = shippingCostCalMethod != null ?
                new ObjectParameter("ShippingCostCalMethod", shippingCostCalMethod) :
                new ObjectParameter("ShippingCostCalMethod", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(short));
    
            var amountWonParameter = amountWon.HasValue ?
                new ObjectParameter("AmountWon", amountWon) :
                new ObjectParameter("AmountWon", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var quoteFilePathParameter = quoteFilePath != null ?
                new ObjectParameter("QuoteFilePath", quoteFilePath) :
                new ObjectParameter("QuoteFilePath", typeof(string));
    
            var extQuoteFilePathParameter = extQuoteFilePath != null ?
                new ObjectParameter("ExtQuoteFilePath", extQuoteFilePath) :
                new ObjectParameter("ExtQuoteFilePath", typeof(string));
    
            var mESCommentsParameter = mESComments != null ?
                new ObjectParameter("MESComments", mESComments) :
                new ObjectParameter("MESComments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertQuote", quoteNumberParameter, pQuoteIdParameter, rFQIdParameter, sAMIdParameter, generalAssumptionParameter, revisionParameter, loginByParameter, customDutiesPercentParameter, salesCommissionPercentParameter, sGAProfitPercentParameter, shippingCostPercentParameter, supplierCostParameter, warehousingPercentParameter, toolingCostPercentParameter, shippingCostCalMethodParameter, statusIdParameter, amountWonParameter, amountParameter, quoteFilePathParameter, extQuoteFilePathParameter, mESCommentsParameter, errorNumber, quoteId);
        }
    
        public virtual int UpdateQuote(string quoteId, string quoteNumber, string sAMId, string generalAssumption, string loginBy, Nullable<decimal> customDutiesPercent, Nullable<decimal> salesCommissionPercent, Nullable<decimal> sGAProfitPercent, Nullable<decimal> shippingCostPercent, Nullable<decimal> supplierCost, Nullable<decimal> warehousingPercent, Nullable<decimal> toolingCostPercent, string shippingCostCalMethod, Nullable<short> statusId, Nullable<decimal> amountWon, Nullable<decimal> amount, string quoteFilePath, string extQuoteFilePath, string mESComments, ObjectParameter errorNumber)
        {
            var quoteIdParameter = quoteId != null ?
                new ObjectParameter("QuoteId", quoteId) :
                new ObjectParameter("QuoteId", typeof(string));
    
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var sAMIdParameter = sAMId != null ?
                new ObjectParameter("SAMId", sAMId) :
                new ObjectParameter("SAMId", typeof(string));
    
            var generalAssumptionParameter = generalAssumption != null ?
                new ObjectParameter("GeneralAssumption", generalAssumption) :
                new ObjectParameter("GeneralAssumption", typeof(string));
    
            var loginByParameter = loginBy != null ?
                new ObjectParameter("LoginBy", loginBy) :
                new ObjectParameter("LoginBy", typeof(string));
    
            var customDutiesPercentParameter = customDutiesPercent.HasValue ?
                new ObjectParameter("CustomDutiesPercent", customDutiesPercent) :
                new ObjectParameter("CustomDutiesPercent", typeof(decimal));
    
            var salesCommissionPercentParameter = salesCommissionPercent.HasValue ?
                new ObjectParameter("SalesCommissionPercent", salesCommissionPercent) :
                new ObjectParameter("SalesCommissionPercent", typeof(decimal));
    
            var sGAProfitPercentParameter = sGAProfitPercent.HasValue ?
                new ObjectParameter("SGAProfitPercent", sGAProfitPercent) :
                new ObjectParameter("SGAProfitPercent", typeof(decimal));
    
            var shippingCostPercentParameter = shippingCostPercent.HasValue ?
                new ObjectParameter("ShippingCostPercent", shippingCostPercent) :
                new ObjectParameter("ShippingCostPercent", typeof(decimal));
    
            var supplierCostParameter = supplierCost.HasValue ?
                new ObjectParameter("SupplierCost", supplierCost) :
                new ObjectParameter("SupplierCost", typeof(decimal));
    
            var warehousingPercentParameter = warehousingPercent.HasValue ?
                new ObjectParameter("WarehousingPercent", warehousingPercent) :
                new ObjectParameter("WarehousingPercent", typeof(decimal));
    
            var toolingCostPercentParameter = toolingCostPercent.HasValue ?
                new ObjectParameter("ToolingCostPercent", toolingCostPercent) :
                new ObjectParameter("ToolingCostPercent", typeof(decimal));
    
            var shippingCostCalMethodParameter = shippingCostCalMethod != null ?
                new ObjectParameter("ShippingCostCalMethod", shippingCostCalMethod) :
                new ObjectParameter("ShippingCostCalMethod", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(short));
    
            var amountWonParameter = amountWon.HasValue ?
                new ObjectParameter("AmountWon", amountWon) :
                new ObjectParameter("AmountWon", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var quoteFilePathParameter = quoteFilePath != null ?
                new ObjectParameter("QuoteFilePath", quoteFilePath) :
                new ObjectParameter("QuoteFilePath", typeof(string));
    
            var extQuoteFilePathParameter = extQuoteFilePath != null ?
                new ObjectParameter("ExtQuoteFilePath", extQuoteFilePath) :
                new ObjectParameter("ExtQuoteFilePath", typeof(string));
    
            var mESCommentsParameter = mESComments != null ?
                new ObjectParameter("MESComments", mESComments) :
                new ObjectParameter("MESComments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateQuote", quoteIdParameter, quoteNumberParameter, sAMIdParameter, generalAssumptionParameter, loginByParameter, customDutiesPercentParameter, salesCommissionPercentParameter, sGAProfitPercentParameter, shippingCostPercentParameter, supplierCostParameter, warehousingPercentParameter, toolingCostPercentParameter, shippingCostCalMethodParameter, statusIdParameter, amountWonParameter, amountParameter, quoteFilePathParameter, extQuoteFilePathParameter, mESCommentsParameter, errorNumber);
        }
    
        public virtual ObjectResult<SearchSuppliersQuotedNotQuoted_Result> SearchSuppliersQuotedNotQuoted(string rFQId)
        {
            var rFQIdParameter = rFQId != null ?
                new ObjectParameter("RFQId", rFQId) :
                new ObjectParameter("RFQId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchSuppliersQuotedNotQuoted_Result>("SearchSuppliersQuotedNotQuoted", rFQIdParameter);
        }
    
        public virtual ObjectResult<GetQuoteInfo_Result> GetQuoteInfo(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuoteInfo_Result>("GetQuoteInfo", idParameter);
        }
    
        public virtual ObjectResult<GetSubmitedQuotePartsDetails_Result> GetSubmitedQuotePartsDetails(string rfqId, Nullable<int> supplierId, Nullable<int> rFQPartId)
        {
            var rfqIdParameter = rfqId != null ?
                new ObjectParameter("RfqId", rfqId) :
                new ObjectParameter("RfqId", typeof(string));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var rFQPartIdParameter = rFQPartId.HasValue ?
                new ObjectParameter("RFQPartId", rFQPartId) :
                new ObjectParameter("RFQPartId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubmitedQuotePartsDetails_Result>("GetSubmitedQuotePartsDetails", rfqIdParameter, supplierIdParameter, rFQPartIdParameter);
        }
    
        public virtual int DeleteMultipleCustomerAddress(string addressIds, string currentUser, ObjectParameter result)
        {
            var addressIdsParameter = addressIds != null ?
                new ObjectParameter("AddressIds", addressIds) :
                new ObjectParameter("AddressIds", typeof(string));
    
            var currentUserParameter = currentUser != null ?
                new ObjectParameter("CurrentUser", currentUser) :
                new ObjectParameter("CurrentUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMultipleCustomerAddress", addressIdsParameter, currentUserParameter, result);
        }
    
        public virtual ObjectResult<GetRfqCoordinators_Result> GetRfqCoordinators()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRfqCoordinators_Result>("GetRfqCoordinators");
        }
    
        public virtual ObjectResult<GetQuotedSuppliers_Result> GetQuotedSuppliers(string rfqId)
        {
            var rfqIdParameter = rfqId != null ?
                new ObjectParameter("RfqId", rfqId) :
                new ObjectParameter("RfqId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuotedSuppliers_Result>("GetQuotedSuppliers", rfqIdParameter);
        }
    
        public virtual ObjectResult<GetQuotesToCustomer_Result> GetQuotesToCustomer(string rfqId)
        {
            var rfqIdParameter = rfqId != null ?
                new ObjectParameter("RfqId", rfqId) :
                new ObjectParameter("RfqId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuotesToCustomer_Result>("GetQuotesToCustomer", rfqIdParameter);
        }
    
        public virtual ObjectResult<GetQuoteCalculationHistory_Result> GetQuoteCalculationHistory(string quoteId)
        {
            var quoteIdParameter = quoteId != null ?
                new ObjectParameter("QuoteId", quoteId) :
                new ObjectParameter("QuoteId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuoteCalculationHistory_Result>("GetQuoteCalculationHistory", quoteIdParameter);
        }
    
        public virtual ObjectResult<RfqAnalysisChart_Result> RfqAnalysisChart(string sAMIds, string customerIds, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string commodityIds, string rFQSourceIds, string groupByType)
        {
            var sAMIdsParameter = sAMIds != null ?
                new ObjectParameter("SAMIds", sAMIds) :
                new ObjectParameter("SAMIds", typeof(string));
    
            var customerIdsParameter = customerIds != null ?
                new ObjectParameter("CustomerIds", customerIds) :
                new ObjectParameter("CustomerIds", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var commodityIdsParameter = commodityIds != null ?
                new ObjectParameter("CommodityIds", commodityIds) :
                new ObjectParameter("CommodityIds", typeof(string));
    
            var rFQSourceIdsParameter = rFQSourceIds != null ?
                new ObjectParameter("RFQSourceIds", rFQSourceIds) :
                new ObjectParameter("RFQSourceIds", typeof(string));
    
            var groupByTypeParameter = groupByType != null ?
                new ObjectParameter("GroupByType", groupByType) :
                new ObjectParameter("GroupByType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RfqAnalysisChart_Result>("RfqAnalysisChart", sAMIdsParameter, customerIdsParameter, startDateParameter, endDateParameter, commodityIdsParameter, rFQSourceIdsParameter, groupByTypeParameter);
        }
    
        public virtual ObjectResult<RFQAnalysisChartForAlina_Result> RFQAnalysisChartForAlina(string sAMIds, string customerIds, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string commodityIds, string rFQSourceIds, string groupByType)
        {
            var sAMIdsParameter = sAMIds != null ?
                new ObjectParameter("SAMIds", sAMIds) :
                new ObjectParameter("SAMIds", typeof(string));
    
            var customerIdsParameter = customerIds != null ?
                new ObjectParameter("CustomerIds", customerIds) :
                new ObjectParameter("CustomerIds", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var commodityIdsParameter = commodityIds != null ?
                new ObjectParameter("CommodityIds", commodityIds) :
                new ObjectParameter("CommodityIds", typeof(string));
    
            var rFQSourceIdsParameter = rFQSourceIds != null ?
                new ObjectParameter("RFQSourceIds", rFQSourceIds) :
                new ObjectParameter("RFQSourceIds", typeof(string));
    
            var groupByTypeParameter = groupByType != null ?
                new ObjectParameter("GroupByType", groupByType) :
                new ObjectParameter("GroupByType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFQAnalysisChartForAlina_Result>("RFQAnalysisChartForAlina", sAMIdsParameter, customerIdsParameter, startDateParameter, endDateParameter, commodityIdsParameter, rFQSourceIdsParameter, groupByTypeParameter);
        }
    
        public virtual ObjectResult<RFQAnalysisReportFirstPart_Result> RFQAnalysisReportFirstPart(string sAMIds, string customerIds, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string commodityIds, string rFQSourceIds)
        {
            var sAMIdsParameter = sAMIds != null ?
                new ObjectParameter("SAMIds", sAMIds) :
                new ObjectParameter("SAMIds", typeof(string));
    
            var customerIdsParameter = customerIds != null ?
                new ObjectParameter("CustomerIds", customerIds) :
                new ObjectParameter("CustomerIds", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var commodityIdsParameter = commodityIds != null ?
                new ObjectParameter("CommodityIds", commodityIds) :
                new ObjectParameter("CommodityIds", typeof(string));
    
            var rFQSourceIdsParameter = rFQSourceIds != null ?
                new ObjectParameter("RFQSourceIds", rFQSourceIds) :
                new ObjectParameter("RFQSourceIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFQAnalysisReportFirstPart_Result>("RFQAnalysisReportFirstPart", sAMIdsParameter, customerIdsParameter, startDateParameter, endDateParameter, commodityIdsParameter, rFQSourceIdsParameter);
        }
    
        public virtual ObjectResult<RFQAnalysisReportForAlinaFirstPart_Result> RFQAnalysisReportForAlinaFirstPart(string sAMIds, string customerIds, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string commodityIds, string rFQSourceIds)
        {
            var sAMIdsParameter = sAMIds != null ?
                new ObjectParameter("SAMIds", sAMIds) :
                new ObjectParameter("SAMIds", typeof(string));
    
            var customerIdsParameter = customerIds != null ?
                new ObjectParameter("CustomerIds", customerIds) :
                new ObjectParameter("CustomerIds", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var commodityIdsParameter = commodityIds != null ?
                new ObjectParameter("CommodityIds", commodityIds) :
                new ObjectParameter("CommodityIds", typeof(string));
    
            var rFQSourceIdsParameter = rFQSourceIds != null ?
                new ObjectParameter("RFQSourceIds", rFQSourceIds) :
                new ObjectParameter("RFQSourceIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFQAnalysisReportForAlinaFirstPart_Result>("RFQAnalysisReportForAlinaFirstPart", sAMIdsParameter, customerIdsParameter, startDateParameter, endDateParameter, commodityIdsParameter, rFQSourceIdsParameter);
        }
    
        public virtual ObjectResult<RFQAnalysisReportForAlinaSecondPart_Result> RFQAnalysisReportForAlinaSecondPart(string sAMIds, string customerIds, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string commodityIds, string rFQSourceIds)
        {
            var sAMIdsParameter = sAMIds != null ?
                new ObjectParameter("SAMIds", sAMIds) :
                new ObjectParameter("SAMIds", typeof(string));
    
            var customerIdsParameter = customerIds != null ?
                new ObjectParameter("CustomerIds", customerIds) :
                new ObjectParameter("CustomerIds", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var commodityIdsParameter = commodityIds != null ?
                new ObjectParameter("CommodityIds", commodityIds) :
                new ObjectParameter("CommodityIds", typeof(string));
    
            var rFQSourceIdsParameter = rFQSourceIds != null ?
                new ObjectParameter("RFQSourceIds", rFQSourceIds) :
                new ObjectParameter("RFQSourceIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFQAnalysisReportForAlinaSecondPart_Result>("RFQAnalysisReportForAlinaSecondPart", sAMIdsParameter, customerIdsParameter, startDateParameter, endDateParameter, commodityIdsParameter, rFQSourceIdsParameter);
        }
    
        public virtual ObjectResult<RFQAnalysisReportSecondPart_Result> RFQAnalysisReportSecondPart(string sAMIds, string customerIds, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string commodityIds, string rFQSourceIds)
        {
            var sAMIdsParameter = sAMIds != null ?
                new ObjectParameter("SAMIds", sAMIds) :
                new ObjectParameter("SAMIds", typeof(string));
    
            var customerIdsParameter = customerIds != null ?
                new ObjectParameter("CustomerIds", customerIds) :
                new ObjectParameter("CustomerIds", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var commodityIdsParameter = commodityIds != null ?
                new ObjectParameter("CommodityIds", commodityIds) :
                new ObjectParameter("CommodityIds", typeof(string));
    
            var rFQSourceIdsParameter = rFQSourceIds != null ?
                new ObjectParameter("RFQSourceIds", rFQSourceIds) :
                new ObjectParameter("RFQSourceIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFQAnalysisReportSecondPart_Result>("RFQAnalysisReportSecondPart", sAMIdsParameter, customerIdsParameter, startDateParameter, endDateParameter, commodityIdsParameter, rFQSourceIdsParameter);
        }
    
        public virtual ObjectResult<RFQNonAwardReasonReportSecondPart_Result> RFQNonAwardReasonReportSecondPart(string sAMIds, string customerIds, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string commodityIds, string rFQSourceIds)
        {
            var sAMIdsParameter = sAMIds != null ?
                new ObjectParameter("SAMIds", sAMIds) :
                new ObjectParameter("SAMIds", typeof(string));
    
            var customerIdsParameter = customerIds != null ?
                new ObjectParameter("CustomerIds", customerIds) :
                new ObjectParameter("CustomerIds", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var commodityIdsParameter = commodityIds != null ?
                new ObjectParameter("CommodityIds", commodityIds) :
                new ObjectParameter("CommodityIds", typeof(string));
    
            var rFQSourceIdsParameter = rFQSourceIds != null ?
                new ObjectParameter("RFQSourceIds", rFQSourceIds) :
                new ObjectParameter("RFQSourceIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFQNonAwardReasonReportSecondPart_Result>("RFQNonAwardReasonReportSecondPart", sAMIdsParameter, customerIdsParameter, startDateParameter, endDateParameter, commodityIdsParameter, rFQSourceIdsParameter);
        }
    
        public virtual ObjectResult<GetTotalDollarQuoted_Result> GetTotalDollarQuoted(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTotalDollarQuoted_Result>("GetTotalDollarQuoted", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetTotalDollarQuotedOnlyBaseQuotes_Result> GetTotalDollarQuotedOnlyBaseQuotes(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTotalDollarQuotedOnlyBaseQuotes_Result>("GetTotalDollarQuotedOnlyBaseQuotes", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<RFQNonAwardReasonChart_Result> RFQNonAwardReasonChart(string sAMIds, string customerIds, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string commodityIds, string rFQSourceIds, string groupByType)
        {
            var sAMIdsParameter = sAMIds != null ?
                new ObjectParameter("SAMIds", sAMIds) :
                new ObjectParameter("SAMIds", typeof(string));
    
            var customerIdsParameter = customerIds != null ?
                new ObjectParameter("CustomerIds", customerIds) :
                new ObjectParameter("CustomerIds", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var commodityIdsParameter = commodityIds != null ?
                new ObjectParameter("CommodityIds", commodityIds) :
                new ObjectParameter("CommodityIds", typeof(string));
    
            var rFQSourceIdsParameter = rFQSourceIds != null ?
                new ObjectParameter("RFQSourceIds", rFQSourceIds) :
                new ObjectParameter("RFQSourceIds", typeof(string));
    
            var groupByTypeParameter = groupByType != null ?
                new ObjectParameter("GroupByType", groupByType) :
                new ObjectParameter("GroupByType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFQNonAwardReasonChart_Result>("RFQNonAwardReasonChart", sAMIdsParameter, customerIdsParameter, startDateParameter, endDateParameter, commodityIdsParameter, rFQSourceIdsParameter, groupByTypeParameter);
        }
    
        public virtual ObjectResult<RFQNonAwardReasonReportFirstPart_Result> RFQNonAwardReasonReportFirstPart(string sAMIds, string customerIds, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string commodityIds, string rFQSourceIds)
        {
            var sAMIdsParameter = sAMIds != null ?
                new ObjectParameter("SAMIds", sAMIds) :
                new ObjectParameter("SAMIds", typeof(string));
    
            var customerIdsParameter = customerIds != null ?
                new ObjectParameter("CustomerIds", customerIds) :
                new ObjectParameter("CustomerIds", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var commodityIdsParameter = commodityIds != null ?
                new ObjectParameter("CommodityIds", commodityIds) :
                new ObjectParameter("CommodityIds", typeof(string));
    
            var rFQSourceIdsParameter = rFQSourceIds != null ?
                new ObjectParameter("RFQSourceIds", rFQSourceIds) :
                new ObjectParameter("RFQSourceIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFQNonAwardReasonReportFirstPart_Result>("RFQNonAwardReasonReportFirstPart", sAMIdsParameter, customerIdsParameter, startDateParameter, endDateParameter, commodityIdsParameter, rFQSourceIdsParameter);
        }
    
        public virtual ObjectResult<GetQuotesByCriteria_Result> GetQuotesByCriteria(string sAMIds, string customerIds, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var sAMIdsParameter = sAMIds != null ?
                new ObjectParameter("SAMIds", sAMIds) :
                new ObjectParameter("SAMIds", typeof(string));
    
            var customerIdsParameter = customerIds != null ?
                new ObjectParameter("CustomerIds", customerIds) :
                new ObjectParameter("CustomerIds", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuotesByCriteria_Result>("GetQuotesByCriteria", sAMIdsParameter, customerIdsParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetQuotesByCriteriaChart_Result> GetQuotesByCriteriaChart(string sAMIds, string customerIds, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string groupByType)
        {
            var sAMIdsParameter = sAMIds != null ?
                new ObjectParameter("SAMIds", sAMIds) :
                new ObjectParameter("SAMIds", typeof(string));
    
            var customerIdsParameter = customerIds != null ?
                new ObjectParameter("CustomerIds", customerIds) :
                new ObjectParameter("CustomerIds", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var groupByTypeParameter = groupByType != null ?
                new ObjectParameter("GroupByType", groupByType) :
                new ObjectParameter("GroupByType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuotesByCriteriaChart_Result>("GetQuotesByCriteriaChart", sAMIdsParameter, customerIdsParameter, startDateParameter, endDateParameter, groupByTypeParameter);
        }
    
        public virtual ObjectResult<GetRfqPartsSupplierWiseFirstPart_Result> GetRfqPartsSupplierWiseFirstPart(string rfqId)
        {
            var rfqIdParameter = rfqId != null ?
                new ObjectParameter("RfqId", rfqId) :
                new ObjectParameter("RfqId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRfqPartsSupplierWiseFirstPart_Result>("GetRfqPartsSupplierWiseFirstPart", rfqIdParameter);
        }
    
        public virtual ObjectResult<GetRfqPartsSupplierWiseSecondPart_Result> GetRfqPartsSupplierWiseSecondPart(string rfqId)
        {
            var rfqIdParameter = rfqId != null ?
                new ObjectParameter("RfqId", rfqId) :
                new ObjectParameter("RfqId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRfqPartsSupplierWiseSecondPart_Result>("GetRfqPartsSupplierWiseSecondPart", rfqIdParameter);
        }
    
        public virtual ObjectResult<GetRfqPartsSupplierWiseThirdPart_Result> GetRfqPartsSupplierWiseThirdPart(string rfqId)
        {
            var rfqIdParameter = rfqId != null ?
                new ObjectParameter("RfqId", rfqId) :
                new ObjectParameter("RfqId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRfqPartsSupplierWiseThirdPart_Result>("GetRfqPartsSupplierWiseThirdPart", rfqIdParameter);
        }
    
        public virtual ObjectResult<GetRFQSupplierPartsQuoteReportFirstPart_Result> GetRFQSupplierPartsQuoteReportFirstPart(string rfqId)
        {
            var rfqIdParameter = rfqId != null ?
                new ObjectParameter("RfqId", rfqId) :
                new ObjectParameter("RfqId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRFQSupplierPartsQuoteReportFirstPart_Result>("GetRFQSupplierPartsQuoteReportFirstPart", rfqIdParameter);
        }
    
        public virtual ObjectResult<GetRFQSupplierPartsQuoteReportSecondPart_Result> GetRFQSupplierPartsQuoteReportSecondPart(string rfqId)
        {
            var rfqIdParameter = rfqId != null ?
                new ObjectParameter("RfqId", rfqId) :
                new ObjectParameter("RfqId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRFQSupplierPartsQuoteReportSecondPart_Result>("GetRFQSupplierPartsQuoteReportSecondPart", rfqIdParameter);
        }
    
        public virtual ObjectResult<GetRFQSupplierPartsQuoteReportThirdPart_Result> GetRFQSupplierPartsQuoteReportThirdPart(string rfqId)
        {
            var rfqIdParameter = rfqId != null ?
                new ObjectParameter("RfqId", rfqId) :
                new ObjectParameter("RfqId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRFQSupplierPartsQuoteReportThirdPart_Result>("GetRFQSupplierPartsQuoteReportThirdPart", rfqIdParameter);
        }
    
        public virtual ObjectResult<GetCommodity_Result> GetCommodity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCommodity_Result>("GetCommodity");
        }
    
        public virtual ObjectResult<GetRfqPartsSupplierWiseSecondPartIgnoreBlank_Result> GetRfqPartsSupplierWiseSecondPartIgnoreBlank(string rfqId)
        {
            var rfqIdParameter = rfqId != null ?
                new ObjectParameter("RfqId", rfqId) :
                new ObjectParameter("RfqId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRfqPartsSupplierWiseSecondPartIgnoreBlank_Result>("GetRfqPartsSupplierWiseSecondPartIgnoreBlank", rfqIdParameter);
        }
    
        public virtual ObjectResult<GetRfqPartsSupplierWiseThirdPartIgnoreBlank_Result> GetRfqPartsSupplierWiseThirdPartIgnoreBlank(string rfqId)
        {
            var rfqIdParameter = rfqId != null ?
                new ObjectParameter("RfqId", rfqId) :
                new ObjectParameter("RfqId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRfqPartsSupplierWiseThirdPartIgnoreBlank_Result>("GetRfqPartsSupplierWiseThirdPartIgnoreBlank", rfqIdParameter);
        }
    
        public virtual ObjectResult<GetRfqPartCostingComparisons_Result> GetRfqPartCostingComparisons(string rfqId, Nullable<int> rfqPartId, Nullable<int> supplierId)
        {
            var rfqIdParameter = rfqId != null ?
                new ObjectParameter("RfqId", rfqId) :
                new ObjectParameter("RfqId", typeof(string));
    
            var rfqPartIdParameter = rfqPartId.HasValue ?
                new ObjectParameter("RfqPartId", rfqPartId) :
                new ObjectParameter("RfqPartId", typeof(int));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("supplierId", supplierId) :
                new ObjectParameter("supplierId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRfqPartCostingComparisons_Result>("GetRfqPartCostingComparisons", rfqIdParameter, rfqPartIdParameter, supplierIdParameter);
        }
    
        public virtual ObjectResult<GetUserDesignation_Result> GetUserDesignation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserDesignation_Result>("GetUserDesignation");
        }
    
        public virtual ObjectResult<GetUsersByTriggerPointId_Result> GetUsersByTriggerPointId(Nullable<int> triggerPointId)
        {
            var triggerPointIdParameter = triggerPointId.HasValue ?
                new ObjectParameter("TriggerPointId", triggerPointId) :
                new ObjectParameter("TriggerPointId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsersByTriggerPointId_Result>("GetUsersByTriggerPointId", triggerPointIdParameter);
        }
    
        public virtual ObjectResult<GetRFQsQuotedBySupplier_Result> GetRFQsQuotedBySupplier(string supplierIds, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string sQIds, string countryIds)
        {
            var supplierIdsParameter = supplierIds != null ?
                new ObjectParameter("SupplierIds", supplierIds) :
                new ObjectParameter("SupplierIds", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var sQIdsParameter = sQIds != null ?
                new ObjectParameter("SQIds", sQIds) :
                new ObjectParameter("SQIds", typeof(string));
    
            var countryIdsParameter = countryIds != null ?
                new ObjectParameter("CountryIds", countryIds) :
                new ObjectParameter("CountryIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRFQsQuotedBySupplier_Result>("GetRFQsQuotedBySupplier", supplierIdsParameter, startDateParameter, endDateParameter, sQIdsParameter, countryIdsParameter);
        }
    
        public virtual ObjectResult<GetCountryList_Result> GetCountryList(string supplierIds, string sQIds)
        {
            var supplierIdsParameter = supplierIds != null ?
                new ObjectParameter("SupplierIds", supplierIds) :
                new ObjectParameter("SupplierIds", typeof(string));
    
            var sQIdsParameter = sQIds != null ?
                new ObjectParameter("SQIds", sQIds) :
                new ObjectParameter("SQIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCountryList_Result>("GetCountryList", supplierIdsParameter, sQIdsParameter);
        }
    
        public virtual ObjectResult<GetSQList_Result> GetSQList(string supplierIds)
        {
            var supplierIdsParameter = supplierIds != null ?
                new ObjectParameter("SupplierIds", supplierIds) :
                new ObjectParameter("SupplierIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSQList_Result>("GetSQList", supplierIdsParameter);
        }
    
        public virtual ObjectResult<GetSupplierList_Result> GetSupplierList(string sQIds, string countryIds)
        {
            var sQIdsParameter = sQIds != null ?
                new ObjectParameter("SQIds", sQIds) :
                new ObjectParameter("SQIds", typeof(string));
    
            var countryIdsParameter = countryIds != null ?
                new ObjectParameter("CountryIds", countryIds) :
                new ObjectParameter("CountryIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSupplierList_Result>("GetSupplierList", sQIdsParameter, countryIdsParameter);
        }
    
        public virtual ObjectResult<GetSAMUsers_Result> GetSAMUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSAMUsers_Result>("GetSAMUsers");
        }
    
        public virtual ObjectResult<GetSuppliersByCriteria_Result> GetSuppliersByCriteria(string sQIds, string countryIds)
        {
            var sQIdsParameter = sQIds != null ?
                new ObjectParameter("SQIds", sQIds) :
                new ObjectParameter("SQIds", typeof(string));
    
            var countryIdsParameter = countryIds != null ?
                new ObjectParameter("CountryIds", countryIds) :
                new ObjectParameter("CountryIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSuppliersByCriteria_Result>("GetSuppliersByCriteria", sQIdsParameter, countryIdsParameter);
        }
    
        public virtual ObjectResult<GetSupplierActivityLevel_Result> GetSupplierActivityLevel(string supplierIds, string sQIds, string countryIds, string commodityIds)
        {
            var supplierIdsParameter = supplierIds != null ?
                new ObjectParameter("SupplierIds", supplierIds) :
                new ObjectParameter("SupplierIds", typeof(string));
    
            var sQIdsParameter = sQIds != null ?
                new ObjectParameter("SQIds", sQIds) :
                new ObjectParameter("SQIds", typeof(string));
    
            var countryIdsParameter = countryIds != null ?
                new ObjectParameter("CountryIds", countryIds) :
                new ObjectParameter("CountryIds", typeof(string));
    
            var commodityIdsParameter = commodityIds != null ?
                new ObjectParameter("CommodityIds", commodityIds) :
                new ObjectParameter("CommodityIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSupplierActivityLevel_Result>("GetSupplierActivityLevel", supplierIdsParameter, sQIdsParameter, countryIdsParameter, commodityIdsParameter);
        }
    
        public virtual ObjectResult<GetCommodityTypeBySupplierIds_Result> GetCommodityTypeBySupplierIds(string supplierIds)
        {
            var supplierIdsParameter = supplierIds != null ?
                new ObjectParameter("SupplierIds", supplierIds) :
                new ObjectParameter("SupplierIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCommodityTypeBySupplierIds_Result>("GetCommodityTypeBySupplierIds", supplierIdsParameter);
        }
    
        public virtual ObjectResult<GetOpenRFQs_Result> GetOpenRFQs(Nullable<System.DateTime> rFQStartDate, Nullable<System.DateTime> rFQEndDate, Nullable<System.DateTime> quoteStartDate, Nullable<System.DateTime> quoteEndDate, string sAMIds, string customerIds, string projectName, string countryIds, string supQuoted, string rfqTypeIds)
        {
            var rFQStartDateParameter = rFQStartDate.HasValue ?
                new ObjectParameter("RFQStartDate", rFQStartDate) :
                new ObjectParameter("RFQStartDate", typeof(System.DateTime));
    
            var rFQEndDateParameter = rFQEndDate.HasValue ?
                new ObjectParameter("RFQEndDate", rFQEndDate) :
                new ObjectParameter("RFQEndDate", typeof(System.DateTime));
    
            var quoteStartDateParameter = quoteStartDate.HasValue ?
                new ObjectParameter("QuoteStartDate", quoteStartDate) :
                new ObjectParameter("QuoteStartDate", typeof(System.DateTime));
    
            var quoteEndDateParameter = quoteEndDate.HasValue ?
                new ObjectParameter("QuoteEndDate", quoteEndDate) :
                new ObjectParameter("QuoteEndDate", typeof(System.DateTime));
    
            var sAMIdsParameter = sAMIds != null ?
                new ObjectParameter("SAMIds", sAMIds) :
                new ObjectParameter("SAMIds", typeof(string));
    
            var customerIdsParameter = customerIds != null ?
                new ObjectParameter("CustomerIds", customerIds) :
                new ObjectParameter("CustomerIds", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var countryIdsParameter = countryIds != null ?
                new ObjectParameter("CountryIds", countryIds) :
                new ObjectParameter("CountryIds", typeof(string));
    
            var supQuotedParameter = supQuoted != null ?
                new ObjectParameter("supQuoted", supQuoted) :
                new ObjectParameter("supQuoted", typeof(string));
    
            var rfqTypeIdsParameter = rfqTypeIds != null ?
                new ObjectParameter("RfqTypeIds", rfqTypeIds) :
                new ObjectParameter("RfqTypeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOpenRFQs_Result>("GetOpenRFQs", rFQStartDateParameter, rFQEndDateParameter, quoteStartDateParameter, quoteEndDateParameter, sAMIdsParameter, customerIdsParameter, projectNameParameter, countryIdsParameter, supQuotedParameter, rfqTypeIdsParameter);
        }
    
        public virtual ObjectResult<dqGetRfqPartsBySupplier_Result> dqGetRfqPartsBySupplier(string supplierIds, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var supplierIdsParameter = supplierIds != null ?
                new ObjectParameter("SupplierIds", supplierIds) :
                new ObjectParameter("SupplierIds", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dqGetRfqPartsBySupplier_Result>("dqGetRfqPartsBySupplier", supplierIdsParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<dqGetRfqPartsSupplierViseFirstPart_Result> dqGetRfqPartsSupplierViseFirstPart(Nullable<int> supplierId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dqGetRfqPartsSupplierViseFirstPart_Result>("dqGetRfqPartsSupplierViseFirstPart", supplierIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<dqGetRfqPartsSupplierViseSecondPart_Result> dqGetRfqPartsSupplierViseSecondPart(Nullable<int> supplierId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dqGetRfqPartsSupplierViseSecondPart_Result>("dqGetRfqPartsSupplierViseSecondPart", supplierIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetAPQPEngineersUsers_Result> GetAPQPEngineersUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPQPEngineersUsers_Result>("GetAPQPEngineersUsers");
        }
    
        public virtual ObjectResult<GetSCCs_Result> GetSCCs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSCCs_Result>("GetSCCs");
        }
    
        public virtual ObjectResult<apqpSearchStatus_Result> apqpSearchStatus(Nullable<int> associatedToId)
        {
            var associatedToIdParameter = associatedToId.HasValue ?
                new ObjectParameter("AssociatedToId", associatedToId) :
                new ObjectParameter("AssociatedToId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<apqpSearchStatus_Result>("apqpSearchStatus", associatedToIdParameter);
        }
    
        public virtual ObjectResult<GetAPQPItemByItemId_Result> GetAPQPItemByItemId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPQPItemByItemId_Result>("GetAPQPItemByItemId", idParameter);
        }
    
        public virtual ObjectResult<GetSAPItem_Result> GetSAPItem(string partNumber, string rFQNumber, string quoteNumber, string customerName)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var rFQNumberParameter = rFQNumber != null ?
                new ObjectParameter("RFQNumber", rFQNumber) :
                new ObjectParameter("RFQNumber", typeof(string));
    
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSAPItem_Result>("GetSAPItem", partNumberParameter, rFQNumberParameter, quoteNumberParameter, customerNameParameter);
        }
    
        public virtual int InsertAPQPItemQuotePart(string quoteDetailIds, string createdBy)
        {
            var quoteDetailIdsParameter = quoteDetailIds != null ?
                new ObjectParameter("QuoteDetailIds", quoteDetailIds) :
                new ObjectParameter("QuoteDetailIds", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAPQPItemQuotePart", quoteDetailIdsParameter, createdByParameter);
        }
    
        public virtual int InsertAPQPSAPItem(string itemIds, string createdBy, ObjectParameter aPQPItemId)
        {
            var itemIdsParameter = itemIds != null ?
                new ObjectParameter("ItemIds", itemIds) :
                new ObjectParameter("ItemIds", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAPQPSAPItem", itemIdsParameter, createdByParameter, aPQPItemId);
        }
    
        public virtual ObjectResult<GetAPQPPPAPSubmissionByItemId_Result> GetAPQPPPAPSubmissionByItemId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPQPPPAPSubmissionByItemId_Result>("GetAPQPPPAPSubmissionByItemId", idParameter);
        }
    
        public virtual ObjectResult<GetAPQPPPAPSubmissions_Result> GetAPQPPPAPSubmissions(string rFQNumber, string quoteNumber, string customerName, string partNumber, string projectName, string statusIds, string sAMUserId, string aPQPEngineerId, string supplyChainCoordinatorId, Nullable<bool> allowConfidentialDocumentType, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var rFQNumberParameter = rFQNumber != null ?
                new ObjectParameter("RFQNumber", rFQNumber) :
                new ObjectParameter("RFQNumber", typeof(string));
    
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var statusIdsParameter = statusIds != null ?
                new ObjectParameter("StatusIds", statusIds) :
                new ObjectParameter("StatusIds", typeof(string));
    
            var sAMUserIdParameter = sAMUserId != null ?
                new ObjectParameter("SAMUserId", sAMUserId) :
                new ObjectParameter("SAMUserId", typeof(string));
    
            var aPQPEngineerIdParameter = aPQPEngineerId != null ?
                new ObjectParameter("APQPEngineerId", aPQPEngineerId) :
                new ObjectParameter("APQPEngineerId", typeof(string));
    
            var supplyChainCoordinatorIdParameter = supplyChainCoordinatorId != null ?
                new ObjectParameter("SupplyChainCoordinatorId", supplyChainCoordinatorId) :
                new ObjectParameter("SupplyChainCoordinatorId", typeof(string));
    
            var allowConfidentialDocumentTypeParameter = allowConfidentialDocumentType.HasValue ?
                new ObjectParameter("AllowConfidentialDocumentType", allowConfidentialDocumentType) :
                new ObjectParameter("AllowConfidentialDocumentType", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPQPPPAPSubmissions_Result>("GetAPQPPPAPSubmissions", rFQNumberParameter, quoteNumberParameter, customerNameParameter, partNumberParameter, projectNameParameter, statusIdsParameter, sAMUserIdParameter, aPQPEngineerIdParameter, supplyChainCoordinatorIdParameter, allowConfidentialDocumentTypeParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<GetAPQPProjectTrackingByItemId_Result> GetAPQPProjectTrackingByItemId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPQPProjectTrackingByItemId_Result>("GetAPQPProjectTrackingByItemId", idParameter);
        }
    
        public virtual ObjectResult<GetAPQPProjectTrackings_Result> GetAPQPProjectTrackings(string rFQNumber, string quoteNumber, string customerName, string partNumber, string projectName, string statusIds, string sAMUserId, string aPQPEngineerId, string supplyChainCoordinatorId, Nullable<bool> allowConfidentialDocumentType, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var rFQNumberParameter = rFQNumber != null ?
                new ObjectParameter("RFQNumber", rFQNumber) :
                new ObjectParameter("RFQNumber", typeof(string));
    
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var statusIdsParameter = statusIds != null ?
                new ObjectParameter("StatusIds", statusIds) :
                new ObjectParameter("StatusIds", typeof(string));
    
            var sAMUserIdParameter = sAMUserId != null ?
                new ObjectParameter("SAMUserId", sAMUserId) :
                new ObjectParameter("SAMUserId", typeof(string));
    
            var aPQPEngineerIdParameter = aPQPEngineerId != null ?
                new ObjectParameter("APQPEngineerId", aPQPEngineerId) :
                new ObjectParameter("APQPEngineerId", typeof(string));
    
            var supplyChainCoordinatorIdParameter = supplyChainCoordinatorId != null ?
                new ObjectParameter("SupplyChainCoordinatorId", supplyChainCoordinatorId) :
                new ObjectParameter("SupplyChainCoordinatorId", typeof(string));
    
            var allowConfidentialDocumentTypeParameter = allowConfidentialDocumentType.HasValue ?
                new ObjectParameter("AllowConfidentialDocumentType", allowConfidentialDocumentType) :
                new ObjectParameter("AllowConfidentialDocumentType", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPQPProjectTrackings_Result>("GetAPQPProjectTrackings", rFQNumberParameter, quoteNumberParameter, customerNameParameter, partNumberParameter, projectNameParameter, statusIdsParameter, sAMUserIdParameter, aPQPEngineerIdParameter, supplyChainCoordinatorIdParameter, allowConfidentialDocumentTypeParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<GetAPQPToolingLaunchByItemId_Result> GetAPQPToolingLaunchByItemId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPQPToolingLaunchByItemId_Result>("GetAPQPToolingLaunchByItemId", idParameter);
        }
    
        public virtual ObjectResult<GetAPQPToolingLaunches_Result> GetAPQPToolingLaunches(string rFQNumber, string quoteNumber, string customerName, string partNumber, string projectName, string statusIds, string sAMUserId, string aPQPEngineerId, string supplyChainCoordinatorId, Nullable<bool> allowConfidentialDocumentType, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var rFQNumberParameter = rFQNumber != null ?
                new ObjectParameter("RFQNumber", rFQNumber) :
                new ObjectParameter("RFQNumber", typeof(string));
    
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var statusIdsParameter = statusIds != null ?
                new ObjectParameter("StatusIds", statusIds) :
                new ObjectParameter("StatusIds", typeof(string));
    
            var sAMUserIdParameter = sAMUserId != null ?
                new ObjectParameter("SAMUserId", sAMUserId) :
                new ObjectParameter("SAMUserId", typeof(string));
    
            var aPQPEngineerIdParameter = aPQPEngineerId != null ?
                new ObjectParameter("APQPEngineerId", aPQPEngineerId) :
                new ObjectParameter("APQPEngineerId", typeof(string));
    
            var supplyChainCoordinatorIdParameter = supplyChainCoordinatorId != null ?
                new ObjectParameter("SupplyChainCoordinatorId", supplyChainCoordinatorId) :
                new ObjectParameter("SupplyChainCoordinatorId", typeof(string));
    
            var allowConfidentialDocumentTypeParameter = allowConfidentialDocumentType.HasValue ?
                new ObjectParameter("AllowConfidentialDocumentType", allowConfidentialDocumentType) :
                new ObjectParameter("AllowConfidentialDocumentType", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPQPToolingLaunches_Result>("GetAPQPToolingLaunches", rFQNumberParameter, quoteNumberParameter, customerNameParameter, partNumberParameter, projectNameParameter, statusIdsParameter, sAMUserIdParameter, aPQPEngineerIdParameter, supplyChainCoordinatorIdParameter, allowConfidentialDocumentTypeParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<GetSecurityObjects_Result> GetSecurityObjects(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSecurityObjects_Result>("GetSecurityObjects", userNameParameter);
        }
    
        public virtual int UpdateAPQPItem(Nullable<int> id, Nullable<System.DateTime> customerToolingPOAuthRcvdDate, Nullable<System.DateTime> projectKickoffDate, string revLevel, string rFQNumber, string quoteNumber, string projectName, Nullable<int> customerId, string customerCode, string customerName, string customerCity, string customerState, string customerManufacturingLocation, Nullable<int> customerProjectLeadId, string customerProjectLead, string customerProjectLeadEmail, string customerProjectLeadPhone, Nullable<int> customerEngineerId, string customerEngineer, string customerEngineerEmail, string customerEngineerPhone, string shipToLocation, string pPAPSubmissionLevel, string numberOfSampleRequired, Nullable<int> supplierId, string supplierCode, string supplierName, string supplierAddress1, string supplierAddress2, string supplierCity, string supplierState, string supplierCountry, string supplierZip, Nullable<int> manufacturerId, string manufacturerCode, string manufacturerName, string manufacturerAddress1, string manufacturerAddress2, string manufacturerCity, string manufacturerState, string manufacturerCountry, string manufacturerZip, string eAUUsage, string partNumber, string partDesc, string materialType, string partWeight, string projectNotes, string customerToolingPONumber, Nullable<decimal> purchasePieceCost, Nullable<decimal> purchaseToolingCost, Nullable<decimal> sellingPiecePrice, Nullable<decimal> sellingToolingPrice, string toolingLeadtimeDays, string aPQPEngineerId, string aPQPEngineer, string supplyChainCoordinatorId, string supplyChainCoordinator, string partClassification, Nullable<short> workTypeId, string workType, Nullable<int> statusId, string sAMUserId, Nullable<short> destinationId, string drawingNumber, string updatedBy, ObjectParameter errorKey)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var customerToolingPOAuthRcvdDateParameter = customerToolingPOAuthRcvdDate.HasValue ?
                new ObjectParameter("CustomerToolingPOAuthRcvdDate", customerToolingPOAuthRcvdDate) :
                new ObjectParameter("CustomerToolingPOAuthRcvdDate", typeof(System.DateTime));
    
            var projectKickoffDateParameter = projectKickoffDate.HasValue ?
                new ObjectParameter("ProjectKickoffDate", projectKickoffDate) :
                new ObjectParameter("ProjectKickoffDate", typeof(System.DateTime));
    
            var revLevelParameter = revLevel != null ?
                new ObjectParameter("RevLevel", revLevel) :
                new ObjectParameter("RevLevel", typeof(string));
    
            var rFQNumberParameter = rFQNumber != null ?
                new ObjectParameter("RFQNumber", rFQNumber) :
                new ObjectParameter("RFQNumber", typeof(string));
    
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerCityParameter = customerCity != null ?
                new ObjectParameter("CustomerCity", customerCity) :
                new ObjectParameter("CustomerCity", typeof(string));
    
            var customerStateParameter = customerState != null ?
                new ObjectParameter("CustomerState", customerState) :
                new ObjectParameter("CustomerState", typeof(string));
    
            var customerManufacturingLocationParameter = customerManufacturingLocation != null ?
                new ObjectParameter("CustomerManufacturingLocation", customerManufacturingLocation) :
                new ObjectParameter("CustomerManufacturingLocation", typeof(string));
    
            var customerProjectLeadIdParameter = customerProjectLeadId.HasValue ?
                new ObjectParameter("CustomerProjectLeadId", customerProjectLeadId) :
                new ObjectParameter("CustomerProjectLeadId", typeof(int));
    
            var customerProjectLeadParameter = customerProjectLead != null ?
                new ObjectParameter("CustomerProjectLead", customerProjectLead) :
                new ObjectParameter("CustomerProjectLead", typeof(string));
    
            var customerProjectLeadEmailParameter = customerProjectLeadEmail != null ?
                new ObjectParameter("CustomerProjectLeadEmail", customerProjectLeadEmail) :
                new ObjectParameter("CustomerProjectLeadEmail", typeof(string));
    
            var customerProjectLeadPhoneParameter = customerProjectLeadPhone != null ?
                new ObjectParameter("CustomerProjectLeadPhone", customerProjectLeadPhone) :
                new ObjectParameter("CustomerProjectLeadPhone", typeof(string));
    
            var customerEngineerIdParameter = customerEngineerId.HasValue ?
                new ObjectParameter("CustomerEngineerId", customerEngineerId) :
                new ObjectParameter("CustomerEngineerId", typeof(int));
    
            var customerEngineerParameter = customerEngineer != null ?
                new ObjectParameter("CustomerEngineer", customerEngineer) :
                new ObjectParameter("CustomerEngineer", typeof(string));
    
            var customerEngineerEmailParameter = customerEngineerEmail != null ?
                new ObjectParameter("CustomerEngineerEmail", customerEngineerEmail) :
                new ObjectParameter("CustomerEngineerEmail", typeof(string));
    
            var customerEngineerPhoneParameter = customerEngineerPhone != null ?
                new ObjectParameter("CustomerEngineerPhone", customerEngineerPhone) :
                new ObjectParameter("CustomerEngineerPhone", typeof(string));
    
            var shipToLocationParameter = shipToLocation != null ?
                new ObjectParameter("ShipToLocation", shipToLocation) :
                new ObjectParameter("ShipToLocation", typeof(string));
    
            var pPAPSubmissionLevelParameter = pPAPSubmissionLevel != null ?
                new ObjectParameter("PPAPSubmissionLevel", pPAPSubmissionLevel) :
                new ObjectParameter("PPAPSubmissionLevel", typeof(string));
    
            var numberOfSampleRequiredParameter = numberOfSampleRequired != null ?
                new ObjectParameter("NumberOfSampleRequired", numberOfSampleRequired) :
                new ObjectParameter("NumberOfSampleRequired", typeof(string));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var supplierCodeParameter = supplierCode != null ?
                new ObjectParameter("SupplierCode", supplierCode) :
                new ObjectParameter("SupplierCode", typeof(string));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var supplierAddress1Parameter = supplierAddress1 != null ?
                new ObjectParameter("SupplierAddress1", supplierAddress1) :
                new ObjectParameter("SupplierAddress1", typeof(string));
    
            var supplierAddress2Parameter = supplierAddress2 != null ?
                new ObjectParameter("SupplierAddress2", supplierAddress2) :
                new ObjectParameter("SupplierAddress2", typeof(string));
    
            var supplierCityParameter = supplierCity != null ?
                new ObjectParameter("SupplierCity", supplierCity) :
                new ObjectParameter("SupplierCity", typeof(string));
    
            var supplierStateParameter = supplierState != null ?
                new ObjectParameter("SupplierState", supplierState) :
                new ObjectParameter("SupplierState", typeof(string));
    
            var supplierCountryParameter = supplierCountry != null ?
                new ObjectParameter("SupplierCountry", supplierCountry) :
                new ObjectParameter("SupplierCountry", typeof(string));
    
            var supplierZipParameter = supplierZip != null ?
                new ObjectParameter("SupplierZip", supplierZip) :
                new ObjectParameter("SupplierZip", typeof(string));
    
            var manufacturerIdParameter = manufacturerId.HasValue ?
                new ObjectParameter("ManufacturerId", manufacturerId) :
                new ObjectParameter("ManufacturerId", typeof(int));
    
            var manufacturerCodeParameter = manufacturerCode != null ?
                new ObjectParameter("ManufacturerCode", manufacturerCode) :
                new ObjectParameter("ManufacturerCode", typeof(string));
    
            var manufacturerNameParameter = manufacturerName != null ?
                new ObjectParameter("ManufacturerName", manufacturerName) :
                new ObjectParameter("ManufacturerName", typeof(string));
    
            var manufacturerAddress1Parameter = manufacturerAddress1 != null ?
                new ObjectParameter("ManufacturerAddress1", manufacturerAddress1) :
                new ObjectParameter("ManufacturerAddress1", typeof(string));
    
            var manufacturerAddress2Parameter = manufacturerAddress2 != null ?
                new ObjectParameter("ManufacturerAddress2", manufacturerAddress2) :
                new ObjectParameter("ManufacturerAddress2", typeof(string));
    
            var manufacturerCityParameter = manufacturerCity != null ?
                new ObjectParameter("ManufacturerCity", manufacturerCity) :
                new ObjectParameter("ManufacturerCity", typeof(string));
    
            var manufacturerStateParameter = manufacturerState != null ?
                new ObjectParameter("ManufacturerState", manufacturerState) :
                new ObjectParameter("ManufacturerState", typeof(string));
    
            var manufacturerCountryParameter = manufacturerCountry != null ?
                new ObjectParameter("ManufacturerCountry", manufacturerCountry) :
                new ObjectParameter("ManufacturerCountry", typeof(string));
    
            var manufacturerZipParameter = manufacturerZip != null ?
                new ObjectParameter("ManufacturerZip", manufacturerZip) :
                new ObjectParameter("ManufacturerZip", typeof(string));
    
            var eAUUsageParameter = eAUUsage != null ?
                new ObjectParameter("EAUUsage", eAUUsage) :
                new ObjectParameter("EAUUsage", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var partDescParameter = partDesc != null ?
                new ObjectParameter("PartDesc", partDesc) :
                new ObjectParameter("PartDesc", typeof(string));
    
            var materialTypeParameter = materialType != null ?
                new ObjectParameter("MaterialType", materialType) :
                new ObjectParameter("MaterialType", typeof(string));
    
            var partWeightParameter = partWeight != null ?
                new ObjectParameter("PartWeight", partWeight) :
                new ObjectParameter("PartWeight", typeof(string));
    
            var projectNotesParameter = projectNotes != null ?
                new ObjectParameter("ProjectNotes", projectNotes) :
                new ObjectParameter("ProjectNotes", typeof(string));
    
            var customerToolingPONumberParameter = customerToolingPONumber != null ?
                new ObjectParameter("CustomerToolingPONumber", customerToolingPONumber) :
                new ObjectParameter("CustomerToolingPONumber", typeof(string));
    
            var purchasePieceCostParameter = purchasePieceCost.HasValue ?
                new ObjectParameter("PurchasePieceCost", purchasePieceCost) :
                new ObjectParameter("PurchasePieceCost", typeof(decimal));
    
            var purchaseToolingCostParameter = purchaseToolingCost.HasValue ?
                new ObjectParameter("PurchaseToolingCost", purchaseToolingCost) :
                new ObjectParameter("PurchaseToolingCost", typeof(decimal));
    
            var sellingPiecePriceParameter = sellingPiecePrice.HasValue ?
                new ObjectParameter("SellingPiecePrice", sellingPiecePrice) :
                new ObjectParameter("SellingPiecePrice", typeof(decimal));
    
            var sellingToolingPriceParameter = sellingToolingPrice.HasValue ?
                new ObjectParameter("SellingToolingPrice", sellingToolingPrice) :
                new ObjectParameter("SellingToolingPrice", typeof(decimal));
    
            var toolingLeadtimeDaysParameter = toolingLeadtimeDays != null ?
                new ObjectParameter("ToolingLeadtimeDays", toolingLeadtimeDays) :
                new ObjectParameter("ToolingLeadtimeDays", typeof(string));
    
            var aPQPEngineerIdParameter = aPQPEngineerId != null ?
                new ObjectParameter("APQPEngineerId", aPQPEngineerId) :
                new ObjectParameter("APQPEngineerId", typeof(string));
    
            var aPQPEngineerParameter = aPQPEngineer != null ?
                new ObjectParameter("APQPEngineer", aPQPEngineer) :
                new ObjectParameter("APQPEngineer", typeof(string));
    
            var supplyChainCoordinatorIdParameter = supplyChainCoordinatorId != null ?
                new ObjectParameter("SupplyChainCoordinatorId", supplyChainCoordinatorId) :
                new ObjectParameter("SupplyChainCoordinatorId", typeof(string));
    
            var supplyChainCoordinatorParameter = supplyChainCoordinator != null ?
                new ObjectParameter("SupplyChainCoordinator", supplyChainCoordinator) :
                new ObjectParameter("SupplyChainCoordinator", typeof(string));
    
            var partClassificationParameter = partClassification != null ?
                new ObjectParameter("PartClassification", partClassification) :
                new ObjectParameter("PartClassification", typeof(string));
    
            var workTypeIdParameter = workTypeId.HasValue ?
                new ObjectParameter("WorkTypeId", workTypeId) :
                new ObjectParameter("WorkTypeId", typeof(short));
    
            var workTypeParameter = workType != null ?
                new ObjectParameter("WorkType", workType) :
                new ObjectParameter("WorkType", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var sAMUserIdParameter = sAMUserId != null ?
                new ObjectParameter("SAMUserId", sAMUserId) :
                new ObjectParameter("SAMUserId", typeof(string));
    
            var destinationIdParameter = destinationId.HasValue ?
                new ObjectParameter("DestinationId", destinationId) :
                new ObjectParameter("DestinationId", typeof(short));
    
            var drawingNumberParameter = drawingNumber != null ?
                new ObjectParameter("DrawingNumber", drawingNumber) :
                new ObjectParameter("DrawingNumber", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAPQPItem", idParameter, customerToolingPOAuthRcvdDateParameter, projectKickoffDateParameter, revLevelParameter, rFQNumberParameter, quoteNumberParameter, projectNameParameter, customerIdParameter, customerCodeParameter, customerNameParameter, customerCityParameter, customerStateParameter, customerManufacturingLocationParameter, customerProjectLeadIdParameter, customerProjectLeadParameter, customerProjectLeadEmailParameter, customerProjectLeadPhoneParameter, customerEngineerIdParameter, customerEngineerParameter, customerEngineerEmailParameter, customerEngineerPhoneParameter, shipToLocationParameter, pPAPSubmissionLevelParameter, numberOfSampleRequiredParameter, supplierIdParameter, supplierCodeParameter, supplierNameParameter, supplierAddress1Parameter, supplierAddress2Parameter, supplierCityParameter, supplierStateParameter, supplierCountryParameter, supplierZipParameter, manufacturerIdParameter, manufacturerCodeParameter, manufacturerNameParameter, manufacturerAddress1Parameter, manufacturerAddress2Parameter, manufacturerCityParameter, manufacturerStateParameter, manufacturerCountryParameter, manufacturerZipParameter, eAUUsageParameter, partNumberParameter, partDescParameter, materialTypeParameter, partWeightParameter, projectNotesParameter, customerToolingPONumberParameter, purchasePieceCostParameter, purchaseToolingCostParameter, sellingPiecePriceParameter, sellingToolingPriceParameter, toolingLeadtimeDaysParameter, aPQPEngineerIdParameter, aPQPEngineerParameter, supplyChainCoordinatorIdParameter, supplyChainCoordinatorParameter, partClassificationParameter, workTypeIdParameter, workTypeParameter, statusIdParameter, sAMUserIdParameter, destinationIdParameter, drawingNumberParameter, updatedByParameter, errorKey);
        }
    
        public virtual int UpdatePPAPSubmission(Nullable<int> id, Nullable<int> aPQPItemId, Nullable<System.DateTime> pSWDate, Nullable<System.DateTime> actualPSWDate, string pPAPStatus, Nullable<System.DateTime> partInfoEnteredIntoSAPDate, Nullable<System.DateTime> partInfoEnteredIntoPPEPDate, Nullable<System.DateTime> pPAPPartsApprovedDate, string packagingDataFilePath, string pSWFilePath, Nullable<System.DateTime> pSWFileCreatedDate, string comments, Nullable<int> aPQPStatusId, string updatedBy, ObjectParameter errorKey)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            var pSWDateParameter = pSWDate.HasValue ?
                new ObjectParameter("PSWDate", pSWDate) :
                new ObjectParameter("PSWDate", typeof(System.DateTime));
    
            var actualPSWDateParameter = actualPSWDate.HasValue ?
                new ObjectParameter("ActualPSWDate", actualPSWDate) :
                new ObjectParameter("ActualPSWDate", typeof(System.DateTime));
    
            var pPAPStatusParameter = pPAPStatus != null ?
                new ObjectParameter("PPAPStatus", pPAPStatus) :
                new ObjectParameter("PPAPStatus", typeof(string));
    
            var partInfoEnteredIntoSAPDateParameter = partInfoEnteredIntoSAPDate.HasValue ?
                new ObjectParameter("PartInfoEnteredIntoSAPDate", partInfoEnteredIntoSAPDate) :
                new ObjectParameter("PartInfoEnteredIntoSAPDate", typeof(System.DateTime));
    
            var partInfoEnteredIntoPPEPDateParameter = partInfoEnteredIntoPPEPDate.HasValue ?
                new ObjectParameter("PartInfoEnteredIntoPPEPDate", partInfoEnteredIntoPPEPDate) :
                new ObjectParameter("PartInfoEnteredIntoPPEPDate", typeof(System.DateTime));
    
            var pPAPPartsApprovedDateParameter = pPAPPartsApprovedDate.HasValue ?
                new ObjectParameter("PPAPPartsApprovedDate", pPAPPartsApprovedDate) :
                new ObjectParameter("PPAPPartsApprovedDate", typeof(System.DateTime));
    
            var packagingDataFilePathParameter = packagingDataFilePath != null ?
                new ObjectParameter("PackagingDataFilePath", packagingDataFilePath) :
                new ObjectParameter("PackagingDataFilePath", typeof(string));
    
            var pSWFilePathParameter = pSWFilePath != null ?
                new ObjectParameter("PSWFilePath", pSWFilePath) :
                new ObjectParameter("PSWFilePath", typeof(string));
    
            var pSWFileCreatedDateParameter = pSWFileCreatedDate.HasValue ?
                new ObjectParameter("PSWFileCreatedDate", pSWFileCreatedDate) :
                new ObjectParameter("PSWFileCreatedDate", typeof(System.DateTime));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var aPQPStatusIdParameter = aPQPStatusId.HasValue ?
                new ObjectParameter("APQPStatusId", aPQPStatusId) :
                new ObjectParameter("APQPStatusId", typeof(int));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePPAPSubmission", idParameter, aPQPItemIdParameter, pSWDateParameter, actualPSWDateParameter, pPAPStatusParameter, partInfoEnteredIntoSAPDateParameter, partInfoEnteredIntoPPEPDateParameter, pPAPPartsApprovedDateParameter, packagingDataFilePathParameter, pSWFilePathParameter, pSWFileCreatedDateParameter, commentsParameter, aPQPStatusIdParameter, updatedByParameter, errorKey);
        }
    
        public virtual int UpdateProjectTracking(Nullable<int> id, Nullable<int> aPQPItemId, Nullable<int> aPQPProjectCategoryId, Nullable<int> aPQPProjectStageId, Nullable<System.DateTime> currentEstimatedToolingCompletionDate, string shipmentTrackingNumber, string qualityFeedbackInformation, Nullable<System.DateTime> estimatedSampleShipmentDate, string remarks, Nullable<int> statusId, Nullable<System.DateTime> actualToolingCompletionDate, Nullable<System.DateTime> actualSampleShipmentDate, string toolChangeDetails, string updatedBy, ObjectParameter errorKey)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            var aPQPProjectCategoryIdParameter = aPQPProjectCategoryId.HasValue ?
                new ObjectParameter("APQPProjectCategoryId", aPQPProjectCategoryId) :
                new ObjectParameter("APQPProjectCategoryId", typeof(int));
    
            var aPQPProjectStageIdParameter = aPQPProjectStageId.HasValue ?
                new ObjectParameter("APQPProjectStageId", aPQPProjectStageId) :
                new ObjectParameter("APQPProjectStageId", typeof(int));
    
            var currentEstimatedToolingCompletionDateParameter = currentEstimatedToolingCompletionDate.HasValue ?
                new ObjectParameter("CurrentEstimatedToolingCompletionDate", currentEstimatedToolingCompletionDate) :
                new ObjectParameter("CurrentEstimatedToolingCompletionDate", typeof(System.DateTime));
    
            var shipmentTrackingNumberParameter = shipmentTrackingNumber != null ?
                new ObjectParameter("ShipmentTrackingNumber", shipmentTrackingNumber) :
                new ObjectParameter("ShipmentTrackingNumber", typeof(string));
    
            var qualityFeedbackInformationParameter = qualityFeedbackInformation != null ?
                new ObjectParameter("QualityFeedbackInformation", qualityFeedbackInformation) :
                new ObjectParameter("QualityFeedbackInformation", typeof(string));
    
            var estimatedSampleShipmentDateParameter = estimatedSampleShipmentDate.HasValue ?
                new ObjectParameter("EstimatedSampleShipmentDate", estimatedSampleShipmentDate) :
                new ObjectParameter("EstimatedSampleShipmentDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var actualToolingCompletionDateParameter = actualToolingCompletionDate.HasValue ?
                new ObjectParameter("ActualToolingCompletionDate", actualToolingCompletionDate) :
                new ObjectParameter("ActualToolingCompletionDate", typeof(System.DateTime));
    
            var actualSampleShipmentDateParameter = actualSampleShipmentDate.HasValue ?
                new ObjectParameter("ActualSampleShipmentDate", actualSampleShipmentDate) :
                new ObjectParameter("ActualSampleShipmentDate", typeof(System.DateTime));
    
            var toolChangeDetailsParameter = toolChangeDetails != null ?
                new ObjectParameter("ToolChangeDetails", toolChangeDetails) :
                new ObjectParameter("ToolChangeDetails", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProjectTracking", idParameter, aPQPItemIdParameter, aPQPProjectCategoryIdParameter, aPQPProjectStageIdParameter, currentEstimatedToolingCompletionDateParameter, shipmentTrackingNumberParameter, qualityFeedbackInformationParameter, estimatedSampleShipmentDateParameter, remarksParameter, statusIdParameter, actualToolingCompletionDateParameter, actualSampleShipmentDateParameter, toolChangeDetailsParameter, updatedByParameter, errorKey);
        }
    
        public virtual int UpdateToolingLaunch(Nullable<int> id, Nullable<int> aPQPItemId, string mESToolingPONumber, string revLevel, Nullable<System.DateTime> revisionDate, Nullable<System.DateTime> toolingKickoffDate, Nullable<System.DateTime> planToolingCompletionDate, string aPQPDrawingStatus, Nullable<int> pPAPSubmissonPreparationDays, Nullable<int> statusId, string comments, string drawingNumber, string updatedBy, ObjectParameter errorKey)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            var mESToolingPONumberParameter = mESToolingPONumber != null ?
                new ObjectParameter("MESToolingPONumber", mESToolingPONumber) :
                new ObjectParameter("MESToolingPONumber", typeof(string));
    
            var revLevelParameter = revLevel != null ?
                new ObjectParameter("RevLevel", revLevel) :
                new ObjectParameter("RevLevel", typeof(string));
    
            var revisionDateParameter = revisionDate.HasValue ?
                new ObjectParameter("RevisionDate", revisionDate) :
                new ObjectParameter("RevisionDate", typeof(System.DateTime));
    
            var toolingKickoffDateParameter = toolingKickoffDate.HasValue ?
                new ObjectParameter("ToolingKickoffDate", toolingKickoffDate) :
                new ObjectParameter("ToolingKickoffDate", typeof(System.DateTime));
    
            var planToolingCompletionDateParameter = planToolingCompletionDate.HasValue ?
                new ObjectParameter("PlanToolingCompletionDate", planToolingCompletionDate) :
                new ObjectParameter("PlanToolingCompletionDate", typeof(System.DateTime));
    
            var aPQPDrawingStatusParameter = aPQPDrawingStatus != null ?
                new ObjectParameter("APQPDrawingStatus", aPQPDrawingStatus) :
                new ObjectParameter("APQPDrawingStatus", typeof(string));
    
            var pPAPSubmissonPreparationDaysParameter = pPAPSubmissonPreparationDays.HasValue ?
                new ObjectParameter("PPAPSubmissonPreparationDays", pPAPSubmissonPreparationDays) :
                new ObjectParameter("PPAPSubmissonPreparationDays", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var drawingNumberParameter = drawingNumber != null ?
                new ObjectParameter("DrawingNumber", drawingNumber) :
                new ObjectParameter("DrawingNumber", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateToolingLaunch", idParameter, aPQPItemIdParameter, mESToolingPONumberParameter, revLevelParameter, revisionDateParameter, toolingKickoffDateParameter, planToolingCompletionDateParameter, aPQPDrawingStatusParameter, pPAPSubmissonPreparationDaysParameter, statusIdParameter, commentsParameter, drawingNumberParameter, updatedByParameter, errorKey);
        }
    
        public virtual ObjectResult<GetPSWByItemId_Result> GetPSWByItemId(Nullable<int> aPQPItemId)
        {
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPSWByItemId_Result>("GetPSWByItemId", aPQPItemIdParameter);
        }
    
        public virtual ObjectResult<GetRoles_Result> GetRoles(Nullable<int> roleId, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoles_Result>("GetRoles", roleIdParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<GetAPQPItems_Result> GetAPQPItems(string rFQNumber, string quoteNumber, string customerName, string partNumber, string projectName, string statusIds, string sAMUserId, string aPQPEngineerId, string supplyChainCoordinatorId, Nullable<bool> allowConfidentialDocumentType, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var rFQNumberParameter = rFQNumber != null ?
                new ObjectParameter("RFQNumber", rFQNumber) :
                new ObjectParameter("RFQNumber", typeof(string));
    
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var statusIdsParameter = statusIds != null ?
                new ObjectParameter("StatusIds", statusIds) :
                new ObjectParameter("StatusIds", typeof(string));
    
            var sAMUserIdParameter = sAMUserId != null ?
                new ObjectParameter("SAMUserId", sAMUserId) :
                new ObjectParameter("SAMUserId", typeof(string));
    
            var aPQPEngineerIdParameter = aPQPEngineerId != null ?
                new ObjectParameter("APQPEngineerId", aPQPEngineerId) :
                new ObjectParameter("APQPEngineerId", typeof(string));
    
            var supplyChainCoordinatorIdParameter = supplyChainCoordinatorId != null ?
                new ObjectParameter("SupplyChainCoordinatorId", supplyChainCoordinatorId) :
                new ObjectParameter("SupplyChainCoordinatorId", typeof(string));
    
            var allowConfidentialDocumentTypeParameter = allowConfidentialDocumentType.HasValue ?
                new ObjectParameter("AllowConfidentialDocumentType", allowConfidentialDocumentType) :
                new ObjectParameter("AllowConfidentialDocumentType", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPQPItems_Result>("GetAPQPItems", rFQNumberParameter, quoteNumberParameter, customerNameParameter, partNumberParameter, projectNameParameter, statusIdsParameter, sAMUserIdParameter, aPQPEngineerIdParameter, supplyChainCoordinatorIdParameter, allowConfidentialDocumentTypeParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual int InsertRoleObjectPrivileges(Nullable<int> roleId, Nullable<int> objectId, Nullable<int> privilegeId, Nullable<bool> hasPricingFieldsAccess, Nullable<bool> allowDeleteRecord, Nullable<bool> allowConfidentialDocumentType, Nullable<bool> allowExportToSAP, Nullable<bool> allowSendDataToSAP, Nullable<bool> allowCheckNPIFStatus, ObjectParameter errorNumber)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var objectIdParameter = objectId.HasValue ?
                new ObjectParameter("ObjectId", objectId) :
                new ObjectParameter("ObjectId", typeof(int));
    
            var privilegeIdParameter = privilegeId.HasValue ?
                new ObjectParameter("PrivilegeId", privilegeId) :
                new ObjectParameter("PrivilegeId", typeof(int));
    
            var hasPricingFieldsAccessParameter = hasPricingFieldsAccess.HasValue ?
                new ObjectParameter("HasPricingFieldsAccess", hasPricingFieldsAccess) :
                new ObjectParameter("HasPricingFieldsAccess", typeof(bool));
    
            var allowDeleteRecordParameter = allowDeleteRecord.HasValue ?
                new ObjectParameter("AllowDeleteRecord", allowDeleteRecord) :
                new ObjectParameter("AllowDeleteRecord", typeof(bool));
    
            var allowConfidentialDocumentTypeParameter = allowConfidentialDocumentType.HasValue ?
                new ObjectParameter("AllowConfidentialDocumentType", allowConfidentialDocumentType) :
                new ObjectParameter("AllowConfidentialDocumentType", typeof(bool));
    
            var allowExportToSAPParameter = allowExportToSAP.HasValue ?
                new ObjectParameter("AllowExportToSAP", allowExportToSAP) :
                new ObjectParameter("AllowExportToSAP", typeof(bool));
    
            var allowSendDataToSAPParameter = allowSendDataToSAP.HasValue ?
                new ObjectParameter("AllowSendDataToSAP", allowSendDataToSAP) :
                new ObjectParameter("AllowSendDataToSAP", typeof(bool));
    
            var allowCheckNPIFStatusParameter = allowCheckNPIFStatus.HasValue ?
                new ObjectParameter("AllowCheckNPIFStatus", allowCheckNPIFStatus) :
                new ObjectParameter("AllowCheckNPIFStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRoleObjectPrivileges", roleIdParameter, objectIdParameter, privilegeIdParameter, hasPricingFieldsAccessParameter, allowDeleteRecordParameter, allowConfidentialDocumentTypeParameter, allowExportToSAPParameter, allowSendDataToSAPParameter, allowCheckNPIFStatusParameter, errorNumber);
        }
    
        public virtual ObjectResult<GetDocumentType_Result> GetDocumentType(string documentType, Nullable<bool> isConfidential, Nullable<int> associatedToId)
        {
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var isConfidentialParameter = isConfidential.HasValue ?
                new ObjectParameter("IsConfidential", isConfidential) :
                new ObjectParameter("IsConfidential", typeof(bool));
    
            var associatedToIdParameter = associatedToId.HasValue ?
                new ObjectParameter("AssociatedToId", associatedToId) :
                new ObjectParameter("AssociatedToId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentType_Result>("GetDocumentType", documentTypeParameter, isConfidentialParameter, associatedToIdParameter);
        }
    
        public virtual int SavePredefinedDocumentTypes(string documentTypeIds, string aPQPItemIds, string loginBy, ObjectParameter errorKey)
        {
            var documentTypeIdsParameter = documentTypeIds != null ?
                new ObjectParameter("DocumentTypeIds", documentTypeIds) :
                new ObjectParameter("DocumentTypeIds", typeof(string));
    
            var aPQPItemIdsParameter = aPQPItemIds != null ?
                new ObjectParameter("APQPItemIds", aPQPItemIds) :
                new ObjectParameter("APQPItemIds", typeof(string));
    
            var loginByParameter = loginBy != null ?
                new ObjectParameter("LoginBy", loginBy) :
                new ObjectParameter("LoginBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SavePredefinedDocumentTypes", documentTypeIdsParameter, aPQPItemIdsParameter, loginByParameter, errorKey);
        }
    
        public virtual ObjectResult<GetDocuments_Result> GetDocuments(Nullable<int> aPQPItemId, Nullable<int> associatedToId)
        {
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            var associatedToIdParameter = associatedToId.HasValue ?
                new ObjectParameter("AssociatedToId", associatedToId) :
                new ObjectParameter("AssociatedToId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocuments_Result>("GetDocuments", aPQPItemIdParameter, associatedToIdParameter);
        }
    
        public virtual ObjectResult<GetDocumentTypeItemIdLookup_Result> GetDocumentTypeItemIdLookup(Nullable<int> associatedToId, Nullable<int> aPQPItemId, Nullable<int> documentTypeId, string isEditMode)
        {
            var associatedToIdParameter = associatedToId.HasValue ?
                new ObjectParameter("AssociatedToId", associatedToId) :
                new ObjectParameter("AssociatedToId", typeof(int));
    
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var isEditModeParameter = isEditMode != null ?
                new ObjectParameter("IsEditMode", isEditMode) :
                new ObjectParameter("IsEditMode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentTypeItemIdLookup_Result>("GetDocumentTypeItemIdLookup", associatedToIdParameter, aPQPItemIdParameter, documentTypeIdParameter, isEditModeParameter);
        }
    
        public virtual ObjectResult<apqpGetQuotePart_Result> apqpGetQuotePart(string quoteIds)
        {
            var quoteIdsParameter = quoteIds != null ?
                new ObjectParameter("QuoteIds", quoteIds) :
                new ObjectParameter("QuoteIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<apqpGetQuotePart_Result>("apqpGetQuotePart", quoteIdsParameter);
        }
    
        public virtual ObjectResult<GetSecurityObjectsByRole_Result> GetSecurityObjectsByRole(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSecurityObjectsByRole_Result>("GetSecurityObjectsByRole", roleIdParameter);
        }
    
        public virtual ObjectResult<GetUsersEmailByTriggerPoint_Result> GetUsersEmailByTriggerPoint(string triggerPoint)
        {
            var triggerPointParameter = triggerPoint != null ?
                new ObjectParameter("TriggerPoint", triggerPoint) :
                new ObjectParameter("TriggerPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsersEmailByTriggerPoint_Result>("GetUsersEmailByTriggerPoint", triggerPointParameter);
        }
    
        public virtual int UpdateAddPSWDocument(Nullable<int> aPQPItemId, string aPQPDocumentIds, ObjectParameter errorKey)
        {
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            var aPQPDocumentIdsParameter = aPQPDocumentIds != null ?
                new ObjectParameter("APQPDocumentIds", aPQPDocumentIds) :
                new ObjectParameter("APQPDocumentIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAddPSWDocument", aPQPItemIdParameter, aPQPDocumentIdsParameter, errorKey);
        }
    
        public virtual ObjectResult<GetEmailTemplates_Result> GetEmailTemplates(string shortCode)
        {
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("shortCode", shortCode) :
                new ObjectParameter("shortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmailTemplates_Result>("GetEmailTemplates", shortCodeParameter);
        }
    
        public virtual ObjectResult<GetSupplierByPartNumber_Result> GetSupplierByPartNumber(Nullable<int> apqpItemId)
        {
            var apqpItemIdParameter = apqpItemId.HasValue ?
                new ObjectParameter("apqpItemId", apqpItemId) :
                new ObjectParameter("apqpItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSupplierByPartNumber_Result>("GetSupplierByPartNumber", apqpItemIdParameter);
        }
    
        public virtual int ShareDocument(string apqpItemIds, Nullable<int> documentId, string loginUser)
        {
            var apqpItemIdsParameter = apqpItemIds != null ?
                new ObjectParameter("apqpItemIds", apqpItemIds) :
                new ObjectParameter("apqpItemIds", typeof(string));
    
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("documentId", documentId) :
                new ObjectParameter("documentId", typeof(int));
    
            var loginUserParameter = loginUser != null ?
                new ObjectParameter("loginUser", loginUser) :
                new ObjectParameter("loginUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ShareDocument", apqpItemIdsParameter, documentIdParameter, loginUserParameter);
        }
    
        public virtual int UpdateIndividualFields(string drawingNumber, string revLevel, Nullable<int> statusId, string fieldName, string updatedFromSource, Nullable<int> aPQPItemId, string currentUser)
        {
            var drawingNumberParameter = drawingNumber != null ?
                new ObjectParameter("DrawingNumber", drawingNumber) :
                new ObjectParameter("DrawingNumber", typeof(string));
    
            var revLevelParameter = revLevel != null ?
                new ObjectParameter("RevLevel", revLevel) :
                new ObjectParameter("RevLevel", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var updatedFromSourceParameter = updatedFromSource != null ?
                new ObjectParameter("UpdatedFromSource", updatedFromSource) :
                new ObjectParameter("UpdatedFromSource", typeof(string));
    
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            var currentUserParameter = currentUser != null ?
                new ObjectParameter("CurrentUser", currentUser) :
                new ObjectParameter("CurrentUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIndividualFields", drawingNumberParameter, revLevelParameter, statusIdParameter, fieldNameParameter, updatedFromSourceParameter, aPQPItemIdParameter, currentUserParameter);
        }
    
        public virtual ObjectResult<apqpGetAPQPPSWByIds_Result> apqpGetAPQPPSWByIds(string aPQPItemIds)
        {
            var aPQPItemIdsParameter = aPQPItemIds != null ?
                new ObjectParameter("APQPItemIds", aPQPItemIds) :
                new ObjectParameter("APQPItemIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<apqpGetAPQPPSWByIds_Result>("apqpGetAPQPPSWByIds", aPQPItemIdsParameter);
        }
    
        public virtual ObjectResult<GetAPQPPSWByIds_Result> GetAPQPPSWByIds(string aPQPItemIds)
        {
            var aPQPItemIdsParameter = aPQPItemIds != null ?
                new ObjectParameter("APQPItemIds", aPQPItemIds) :
                new ObjectParameter("APQPItemIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPQPPSWByIds_Result>("GetAPQPPSWByIds", aPQPItemIdsParameter);
        }
    
        public virtual int AddToCRFromSAPItem(Nullable<int> itemId, Nullable<int> statusId, string designationIds, string createdBy, ObjectParameter changeRequestId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var designationIdsParameter = designationIds != null ?
                new ObjectParameter("DesignationIds", designationIds) :
                new ObjectParameter("DesignationIds", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddToCRFromSAPItem", itemIdParameter, statusIdParameter, designationIdsParameter, createdByParameter, changeRequestId);
        }
    
        public virtual int crDeleteChangeRequest(Nullable<int> id, ObjectParameter errorKey)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("crDeleteChangeRequest", idParameter, errorKey);
        }
    
        public virtual int crDeleteDocument(Nullable<int> documentId)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("crDeleteDocument", documentIdParameter);
        }
    
        public virtual ObjectResult<crGetChangeRequestByItemId_Result> crGetChangeRequestByItemId(Nullable<int> aPQPItemId)
        {
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<crGetChangeRequestByItemId_Result>("crGetChangeRequestByItemId", aPQPItemIdParameter);
        }
    
        public virtual ObjectResult<crGetChangeRequests_Result> crGetChangeRequests(Nullable<int> changeRequestId, string partNumber, string statusIds, string assignedTo, Nullable<int> updated, string revLevel, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var changeRequestIdParameter = changeRequestId.HasValue ?
                new ObjectParameter("ChangeRequestId", changeRequestId) :
                new ObjectParameter("ChangeRequestId", typeof(int));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var statusIdsParameter = statusIds != null ?
                new ObjectParameter("StatusIds", statusIds) :
                new ObjectParameter("StatusIds", typeof(string));
    
            var assignedToParameter = assignedTo != null ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(string));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(int));
    
            var revLevelParameter = revLevel != null ?
                new ObjectParameter("RevLevel", revLevel) :
                new ObjectParameter("RevLevel", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<crGetChangeRequests_Result>("crGetChangeRequests", changeRequestIdParameter, partNumberParameter, statusIdsParameter, assignedToParameter, updatedParameter, revLevelParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<crGetDocumentById_Result> crGetDocumentById(Nullable<int> documentId)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<crGetDocumentById_Result>("crGetDocumentById", documentIdParameter);
        }
    
        public virtual ObjectResult<crGetDocumentList_Result> crGetDocumentList(Nullable<int> changeRequestId)
        {
            var changeRequestIdParameter = changeRequestId.HasValue ?
                new ObjectParameter("ChangeRequestId", changeRequestId) :
                new ObjectParameter("ChangeRequestId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<crGetDocumentList_Result>("crGetDocumentList", changeRequestIdParameter);
        }
    
        public virtual int crSaveChangeRequests(Nullable<int> aPQPItemId, string sourceOfChange, string descriptionOfChange, string revLevel, Nullable<System.DateTime> drawingRevDate, Nullable<System.DateTime> mfgStartDateForNewRev, string subject, Nullable<int> statusId, string assignedTo, Nullable<bool> isChangeApproved, Nullable<bool> isChangeImplemented, Nullable<decimal> apqpPurchasePieceCost, Nullable<decimal> apqpSellingPiecePrice, Nullable<decimal> apqpPurchaseToolingCost, Nullable<decimal> apqpSellingToolingPrice, Nullable<decimal> purchasePieceCost, Nullable<decimal> sellingPiecePrice, Nullable<decimal> purchaseToolingCost, Nullable<decimal> sellingToolingPrice, string watcherIds, string drawingNumber, string loginBy, ObjectParameter changeRequestId, ObjectParameter errorKey)
        {
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            var sourceOfChangeParameter = sourceOfChange != null ?
                new ObjectParameter("SourceOfChange", sourceOfChange) :
                new ObjectParameter("SourceOfChange", typeof(string));
    
            var descriptionOfChangeParameter = descriptionOfChange != null ?
                new ObjectParameter("DescriptionOfChange", descriptionOfChange) :
                new ObjectParameter("DescriptionOfChange", typeof(string));
    
            var revLevelParameter = revLevel != null ?
                new ObjectParameter("RevLevel", revLevel) :
                new ObjectParameter("RevLevel", typeof(string));
    
            var drawingRevDateParameter = drawingRevDate.HasValue ?
                new ObjectParameter("DrawingRevDate", drawingRevDate) :
                new ObjectParameter("DrawingRevDate", typeof(System.DateTime));
    
            var mfgStartDateForNewRevParameter = mfgStartDateForNewRev.HasValue ?
                new ObjectParameter("MfgStartDateForNewRev", mfgStartDateForNewRev) :
                new ObjectParameter("MfgStartDateForNewRev", typeof(System.DateTime));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var assignedToParameter = assignedTo != null ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(string));
    
            var isChangeApprovedParameter = isChangeApproved.HasValue ?
                new ObjectParameter("IsChangeApproved", isChangeApproved) :
                new ObjectParameter("IsChangeApproved", typeof(bool));
    
            var isChangeImplementedParameter = isChangeImplemented.HasValue ?
                new ObjectParameter("IsChangeImplemented", isChangeImplemented) :
                new ObjectParameter("IsChangeImplemented", typeof(bool));
    
            var apqpPurchasePieceCostParameter = apqpPurchasePieceCost.HasValue ?
                new ObjectParameter("apqpPurchasePieceCost", apqpPurchasePieceCost) :
                new ObjectParameter("apqpPurchasePieceCost", typeof(decimal));
    
            var apqpSellingPiecePriceParameter = apqpSellingPiecePrice.HasValue ?
                new ObjectParameter("apqpSellingPiecePrice", apqpSellingPiecePrice) :
                new ObjectParameter("apqpSellingPiecePrice", typeof(decimal));
    
            var apqpPurchaseToolingCostParameter = apqpPurchaseToolingCost.HasValue ?
                new ObjectParameter("apqpPurchaseToolingCost", apqpPurchaseToolingCost) :
                new ObjectParameter("apqpPurchaseToolingCost", typeof(decimal));
    
            var apqpSellingToolingPriceParameter = apqpSellingToolingPrice.HasValue ?
                new ObjectParameter("apqpSellingToolingPrice", apqpSellingToolingPrice) :
                new ObjectParameter("apqpSellingToolingPrice", typeof(decimal));
    
            var purchasePieceCostParameter = purchasePieceCost.HasValue ?
                new ObjectParameter("PurchasePieceCost", purchasePieceCost) :
                new ObjectParameter("PurchasePieceCost", typeof(decimal));
    
            var sellingPiecePriceParameter = sellingPiecePrice.HasValue ?
                new ObjectParameter("SellingPiecePrice", sellingPiecePrice) :
                new ObjectParameter("SellingPiecePrice", typeof(decimal));
    
            var purchaseToolingCostParameter = purchaseToolingCost.HasValue ?
                new ObjectParameter("PurchaseToolingCost", purchaseToolingCost) :
                new ObjectParameter("PurchaseToolingCost", typeof(decimal));
    
            var sellingToolingPriceParameter = sellingToolingPrice.HasValue ?
                new ObjectParameter("SellingToolingPrice", sellingToolingPrice) :
                new ObjectParameter("SellingToolingPrice", typeof(decimal));
    
            var watcherIdsParameter = watcherIds != null ?
                new ObjectParameter("WatcherIds", watcherIds) :
                new ObjectParameter("WatcherIds", typeof(string));
    
            var drawingNumberParameter = drawingNumber != null ?
                new ObjectParameter("DrawingNumber", drawingNumber) :
                new ObjectParameter("DrawingNumber", typeof(string));
    
            var loginByParameter = loginBy != null ?
                new ObjectParameter("LoginBy", loginBy) :
                new ObjectParameter("LoginBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("crSaveChangeRequests", aPQPItemIdParameter, sourceOfChangeParameter, descriptionOfChangeParameter, revLevelParameter, drawingRevDateParameter, mfgStartDateForNewRevParameter, subjectParameter, statusIdParameter, assignedToParameter, isChangeApprovedParameter, isChangeImplementedParameter, apqpPurchasePieceCostParameter, apqpSellingPiecePriceParameter, apqpPurchaseToolingCostParameter, apqpSellingToolingPriceParameter, purchasePieceCostParameter, sellingPiecePriceParameter, purchaseToolingCostParameter, sellingToolingPriceParameter, watcherIdsParameter, drawingNumberParameter, loginByParameter, changeRequestId, errorKey);
        }
    
        public virtual int crSaveDocument(Nullable<int> changeRequestId, Nullable<int> documentTypeId, string fileTitle, string filePath, string comments, string loginBy, ObjectParameter id, ObjectParameter errorKey)
        {
            var changeRequestIdParameter = changeRequestId.HasValue ?
                new ObjectParameter("ChangeRequestId", changeRequestId) :
                new ObjectParameter("ChangeRequestId", typeof(int));
    
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var fileTitleParameter = fileTitle != null ?
                new ObjectParameter("FileTitle", fileTitle) :
                new ObjectParameter("FileTitle", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var loginByParameter = loginBy != null ?
                new ObjectParameter("LoginBy", loginBy) :
                new ObjectParameter("LoginBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("crSaveDocument", changeRequestIdParameter, documentTypeIdParameter, fileTitleParameter, filePathParameter, commentsParameter, loginByParameter, id, errorKey);
        }
    
        public virtual int crUpdateAPQPItem(Nullable<int> changeRequestId, Nullable<int> aPQPItemId, Nullable<decimal> purchasePieceCost, Nullable<decimal> purchaseToolingCost, Nullable<decimal> sellingPiecePrice, Nullable<decimal> sellingToolingPrice, Nullable<System.DateTime> revisionDate, string revLevel, string drawingNumber, string loginBy, ObjectParameter errorKey)
        {
            var changeRequestIdParameter = changeRequestId.HasValue ?
                new ObjectParameter("ChangeRequestId", changeRequestId) :
                new ObjectParameter("ChangeRequestId", typeof(int));
    
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            var purchasePieceCostParameter = purchasePieceCost.HasValue ?
                new ObjectParameter("PurchasePieceCost", purchasePieceCost) :
                new ObjectParameter("PurchasePieceCost", typeof(decimal));
    
            var purchaseToolingCostParameter = purchaseToolingCost.HasValue ?
                new ObjectParameter("PurchaseToolingCost", purchaseToolingCost) :
                new ObjectParameter("PurchaseToolingCost", typeof(decimal));
    
            var sellingPiecePriceParameter = sellingPiecePrice.HasValue ?
                new ObjectParameter("SellingPiecePrice", sellingPiecePrice) :
                new ObjectParameter("SellingPiecePrice", typeof(decimal));
    
            var sellingToolingPriceParameter = sellingToolingPrice.HasValue ?
                new ObjectParameter("SellingToolingPrice", sellingToolingPrice) :
                new ObjectParameter("SellingToolingPrice", typeof(decimal));
    
            var revisionDateParameter = revisionDate.HasValue ?
                new ObjectParameter("RevisionDate", revisionDate) :
                new ObjectParameter("RevisionDate", typeof(System.DateTime));
    
            var revLevelParameter = revLevel != null ?
                new ObjectParameter("RevLevel", revLevel) :
                new ObjectParameter("RevLevel", typeof(string));
    
            var drawingNumberParameter = drawingNumber != null ?
                new ObjectParameter("DrawingNumber", drawingNumber) :
                new ObjectParameter("DrawingNumber", typeof(string));
    
            var loginByParameter = loginBy != null ?
                new ObjectParameter("LoginBy", loginBy) :
                new ObjectParameter("LoginBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("crUpdateAPQPItem", changeRequestIdParameter, aPQPItemIdParameter, purchasePieceCostParameter, purchaseToolingCostParameter, sellingPiecePriceParameter, sellingToolingPriceParameter, revisionDateParameter, revLevelParameter, drawingNumberParameter, loginByParameter, errorKey);
        }
    
        public virtual ObjectResult<GetAPQPPartNoWithDesc_Result> GetAPQPPartNoWithDesc(Nullable<int> isNewRequest)
        {
            var isNewRequestParameter = isNewRequest.HasValue ?
                new ObjectParameter("IsNewRequest", isNewRequest) :
                new ObjectParameter("IsNewRequest", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPQPPartNoWithDesc_Result>("GetAPQPPartNoWithDesc", isNewRequestParameter);
        }
    
        public virtual ObjectResult<crGetChangeRequestById_Result> crGetChangeRequestById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<crGetChangeRequestById_Result>("crGetChangeRequestById", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> crGetChangeRequestStatusByItemId(Nullable<int> aPQPItemId)
        {
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("crGetChangeRequestStatusByItemId", aPQPItemIdParameter);
        }
    
        public virtual ObjectResult<GetAssignToUserByDesignation_Result> GetAssignToUserByDesignation(string designationIds, Nullable<bool> active)
        {
            var designationIdsParameter = designationIds != null ?
                new ObjectParameter("DesignationIds", designationIds) :
                new ObjectParameter("DesignationIds", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAssignToUserByDesignation_Result>("GetAssignToUserByDesignation", designationIdsParameter, activeParameter);
        }
    
        public virtual int dtDeleteDefectTracking(Nullable<int> defectTrackingId, ObjectParameter errorKey)
        {
            var defectTrackingIdParameter = defectTrackingId.HasValue ?
                new ObjectParameter("DefectTrackingId", defectTrackingId) :
                new ObjectParameter("DefectTrackingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dtDeleteDefectTracking", defectTrackingIdParameter, errorKey);
        }
    
        public virtual ObjectResult<dtGetDefectTrackingById_Result> dtGetDefectTrackingById(Nullable<int> defectTrackingId)
        {
            var defectTrackingIdParameter = defectTrackingId.HasValue ?
                new ObjectParameter("DefectTrackingId", defectTrackingId) :
                new ObjectParameter("DefectTrackingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtGetDefectTrackingById_Result>("dtGetDefectTrackingById", defectTrackingIdParameter);
        }
    
        public virtual ObjectResult<dtGetDefectTrackingReport_Result> dtGetDefectTrackingReport(string rMANumber, string customerName, string supplierName, Nullable<int> aPQPItemId, string rMAInitiatedBy, string correctiveActionNumber, string mESWarehouseLocation, string supplierCode)
        {
            var rMANumberParameter = rMANumber != null ?
                new ObjectParameter("RMANumber", rMANumber) :
                new ObjectParameter("RMANumber", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            var rMAInitiatedByParameter = rMAInitiatedBy != null ?
                new ObjectParameter("RMAInitiatedBy", rMAInitiatedBy) :
                new ObjectParameter("RMAInitiatedBy", typeof(string));
    
            var correctiveActionNumberParameter = correctiveActionNumber != null ?
                new ObjectParameter("CorrectiveActionNumber", correctiveActionNumber) :
                new ObjectParameter("CorrectiveActionNumber", typeof(string));
    
            var mESWarehouseLocationParameter = mESWarehouseLocation != null ?
                new ObjectParameter("MESWarehouseLocation", mESWarehouseLocation) :
                new ObjectParameter("MESWarehouseLocation", typeof(string));
    
            var supplierCodeParameter = supplierCode != null ?
                new ObjectParameter("SupplierCode", supplierCode) :
                new ObjectParameter("SupplierCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtGetDefectTrackingReport_Result>("dtGetDefectTrackingReport", rMANumberParameter, customerNameParameter, supplierNameParameter, aPQPItemIdParameter, rMAInitiatedByParameter, correctiveActionNumberParameter, mESWarehouseLocationParameter, supplierCodeParameter);
        }
    
        public virtual int dtSaveDefectTracking(ObjectParameter defectTrackingId, string includeInPPM, string finding, string qualityOrDeliveryIssue, string customerCode, string rMANumber, Nullable<System.DateTime> rMADate, string rMAInitiatedBy, string aPQPItemIDs, string loginBy, ObjectParameter errorKey)
        {
            var includeInPPMParameter = includeInPPM != null ?
                new ObjectParameter("IncludeInPPM", includeInPPM) :
                new ObjectParameter("IncludeInPPM", typeof(string));
    
            var findingParameter = finding != null ?
                new ObjectParameter("Finding", finding) :
                new ObjectParameter("Finding", typeof(string));
    
            var qualityOrDeliveryIssueParameter = qualityOrDeliveryIssue != null ?
                new ObjectParameter("QualityOrDeliveryIssue", qualityOrDeliveryIssue) :
                new ObjectParameter("QualityOrDeliveryIssue", typeof(string));
    
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            var rMANumberParameter = rMANumber != null ?
                new ObjectParameter("RMANumber", rMANumber) :
                new ObjectParameter("RMANumber", typeof(string));
    
            var rMADateParameter = rMADate.HasValue ?
                new ObjectParameter("RMADate", rMADate) :
                new ObjectParameter("RMADate", typeof(System.DateTime));
    
            var rMAInitiatedByParameter = rMAInitiatedBy != null ?
                new ObjectParameter("RMAInitiatedBy", rMAInitiatedBy) :
                new ObjectParameter("RMAInitiatedBy", typeof(string));
    
            var aPQPItemIDsParameter = aPQPItemIDs != null ?
                new ObjectParameter("APQPItemIDs", aPQPItemIDs) :
                new ObjectParameter("APQPItemIDs", typeof(string));
    
            var loginByParameter = loginBy != null ?
                new ObjectParameter("LoginBy", loginBy) :
                new ObjectParameter("LoginBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dtSaveDefectTracking", defectTrackingId, includeInPPMParameter, findingParameter, qualityOrDeliveryIssueParameter, customerCodeParameter, rMANumberParameter, rMADateParameter, rMAInitiatedByParameter, aPQPItemIDsParameter, loginByParameter, errorKey);
        }
    
        public virtual ObjectResult<GetDocumentTypeConfidentialLookup_Result> GetDocumentTypeConfidentialLookup(Nullable<int> associatedToId)
        {
            var associatedToIdParameter = associatedToId.HasValue ?
                new ObjectParameter("AssociatedToId", associatedToId) :
                new ObjectParameter("AssociatedToId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentTypeConfidentialLookup_Result>("GetDocumentTypeConfidentialLookup", associatedToIdParameter);
        }
    
        public virtual ObjectResult<dtGetPartDocumentById_Result> dtGetPartDocumentById(Nullable<int> partDocumentId)
        {
            var partDocumentIdParameter = partDocumentId.HasValue ?
                new ObjectParameter("PartDocumentId", partDocumentId) :
                new ObjectParameter("PartDocumentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtGetPartDocumentById_Result>("dtGetPartDocumentById", partDocumentIdParameter);
        }
    
        public virtual ObjectResult<dtGetPartDocuments_Result> dtGetPartDocuments(Nullable<int> defectTrackingDetailId, Nullable<int> associatedToId)
        {
            var defectTrackingDetailIdParameter = defectTrackingDetailId.HasValue ?
                new ObjectParameter("DefectTrackingDetailId", defectTrackingDetailId) :
                new ObjectParameter("DefectTrackingDetailId", typeof(int));
    
            var associatedToIdParameter = associatedToId.HasValue ?
                new ObjectParameter("AssociatedToId", associatedToId) :
                new ObjectParameter("AssociatedToId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtGetPartDocuments_Result>("dtGetPartDocuments", defectTrackingDetailIdParameter, associatedToIdParameter);
        }
    
        public virtual ObjectResult<GetSAPItemByCustomer_Result> GetSAPItemByCustomer(string customerCode, string customerName, Nullable<int> defectTrackingId)
        {
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var defectTrackingIdParameter = defectTrackingId.HasValue ?
                new ObjectParameter("DefectTrackingId", defectTrackingId) :
                new ObjectParameter("DefectTrackingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSAPItemByCustomer_Result>("GetSAPItemByCustomer", customerCodeParameter, customerNameParameter, defectTrackingIdParameter);
        }
    
        public virtual ObjectResult<GetSAPCustomerLookUp_Result> GetSAPCustomerLookUp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSAPCustomerLookUp_Result>("GetSAPCustomerLookUp");
        }
    
        public virtual int dtGetGenerateNewRMANumber(ObjectParameter rMANumber, ObjectParameter errorKey)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dtGetGenerateNewRMANumber", rMANumber, errorKey);
        }
    
        public virtual ObjectResult<dtGetDefectTrackingDetails_Result> dtGetDefectTrackingDetails(Nullable<int> defectTrackingId)
        {
            var defectTrackingIdParameter = defectTrackingId.HasValue ?
                new ObjectParameter("DefectTrackingId", defectTrackingId) :
                new ObjectParameter("DefectTrackingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtGetDefectTrackingDetails_Result>("dtGetDefectTrackingDetails", defectTrackingIdParameter);
        }
    
        public virtual int dtSaveDefectTrackingDetails(ObjectParameter defectTrackingDetailId, Nullable<int> defectTrackingId, Nullable<int> aPQPItemId, Nullable<System.DateTime> dateRejected, string partName, Nullable<int> customerInitialRejectQty, string defectDescription, Nullable<System.DateTime> sortedStartDate, Nullable<int> customerBalanceSortedQty, Nullable<int> customerAdditionalRejectQty, Nullable<int> customerTotalReworkedQty, Nullable<int> customerRejectedPartQty, string correctiveActionNumber, string correctiveActionInitiatedBy, Nullable<System.DateTime> correctiveActionInitiatedDate, Nullable<System.DateTime> correctiveActionDueDate, Nullable<System.DateTime> actualCompletedDate, string mESWarehouseLocation, Nullable<short> mESWarehouseLocationId, Nullable<int> mESTotalSortedQty, Nullable<int> mESRejectDuringSort, Nullable<int> mESReworkedQty, Nullable<System.DateTime> sortedEndDate, Nullable<int> totalNumberOfPartsRejected, Nullable<System.DateTime> customerIssuedCreditDate, string supplierCode, string supplierName, string supplierContactName, Nullable<decimal> sortingCost, Nullable<System.DateTime> supplierIssuedDebitDate, string comment, string region, string dispositionOfParts, Nullable<int> finalQtyScrapped, Nullable<int> finalQtyGood, string weightPerPiece, Nullable<decimal> sellingPricePerPiece, string loginBy, ObjectParameter errorKey)
        {
            var defectTrackingIdParameter = defectTrackingId.HasValue ?
                new ObjectParameter("DefectTrackingId", defectTrackingId) :
                new ObjectParameter("DefectTrackingId", typeof(int));
    
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            var dateRejectedParameter = dateRejected.HasValue ?
                new ObjectParameter("DateRejected", dateRejected) :
                new ObjectParameter("DateRejected", typeof(System.DateTime));
    
            var partNameParameter = partName != null ?
                new ObjectParameter("PartName", partName) :
                new ObjectParameter("PartName", typeof(string));
    
            var customerInitialRejectQtyParameter = customerInitialRejectQty.HasValue ?
                new ObjectParameter("CustomerInitialRejectQty", customerInitialRejectQty) :
                new ObjectParameter("CustomerInitialRejectQty", typeof(int));
    
            var defectDescriptionParameter = defectDescription != null ?
                new ObjectParameter("DefectDescription", defectDescription) :
                new ObjectParameter("DefectDescription", typeof(string));
    
            var sortedStartDateParameter = sortedStartDate.HasValue ?
                new ObjectParameter("SortedStartDate", sortedStartDate) :
                new ObjectParameter("SortedStartDate", typeof(System.DateTime));
    
            var customerBalanceSortedQtyParameter = customerBalanceSortedQty.HasValue ?
                new ObjectParameter("CustomerBalanceSortedQty", customerBalanceSortedQty) :
                new ObjectParameter("CustomerBalanceSortedQty", typeof(int));
    
            var customerAdditionalRejectQtyParameter = customerAdditionalRejectQty.HasValue ?
                new ObjectParameter("CustomerAdditionalRejectQty", customerAdditionalRejectQty) :
                new ObjectParameter("CustomerAdditionalRejectQty", typeof(int));
    
            var customerTotalReworkedQtyParameter = customerTotalReworkedQty.HasValue ?
                new ObjectParameter("CustomerTotalReworkedQty", customerTotalReworkedQty) :
                new ObjectParameter("CustomerTotalReworkedQty", typeof(int));
    
            var customerRejectedPartQtyParameter = customerRejectedPartQty.HasValue ?
                new ObjectParameter("CustomerRejectedPartQty", customerRejectedPartQty) :
                new ObjectParameter("CustomerRejectedPartQty", typeof(int));
    
            var correctiveActionNumberParameter = correctiveActionNumber != null ?
                new ObjectParameter("CorrectiveActionNumber", correctiveActionNumber) :
                new ObjectParameter("CorrectiveActionNumber", typeof(string));
    
            var correctiveActionInitiatedByParameter = correctiveActionInitiatedBy != null ?
                new ObjectParameter("CorrectiveActionInitiatedBy", correctiveActionInitiatedBy) :
                new ObjectParameter("CorrectiveActionInitiatedBy", typeof(string));
    
            var correctiveActionInitiatedDateParameter = correctiveActionInitiatedDate.HasValue ?
                new ObjectParameter("CorrectiveActionInitiatedDate", correctiveActionInitiatedDate) :
                new ObjectParameter("CorrectiveActionInitiatedDate", typeof(System.DateTime));
    
            var correctiveActionDueDateParameter = correctiveActionDueDate.HasValue ?
                new ObjectParameter("CorrectiveActionDueDate", correctiveActionDueDate) :
                new ObjectParameter("CorrectiveActionDueDate", typeof(System.DateTime));
    
            var actualCompletedDateParameter = actualCompletedDate.HasValue ?
                new ObjectParameter("ActualCompletedDate", actualCompletedDate) :
                new ObjectParameter("ActualCompletedDate", typeof(System.DateTime));
    
            var mESWarehouseLocationParameter = mESWarehouseLocation != null ?
                new ObjectParameter("MESWarehouseLocation", mESWarehouseLocation) :
                new ObjectParameter("MESWarehouseLocation", typeof(string));
    
            var mESWarehouseLocationIdParameter = mESWarehouseLocationId.HasValue ?
                new ObjectParameter("MESWarehouseLocationId", mESWarehouseLocationId) :
                new ObjectParameter("MESWarehouseLocationId", typeof(short));
    
            var mESTotalSortedQtyParameter = mESTotalSortedQty.HasValue ?
                new ObjectParameter("MESTotalSortedQty", mESTotalSortedQty) :
                new ObjectParameter("MESTotalSortedQty", typeof(int));
    
            var mESRejectDuringSortParameter = mESRejectDuringSort.HasValue ?
                new ObjectParameter("MESRejectDuringSort", mESRejectDuringSort) :
                new ObjectParameter("MESRejectDuringSort", typeof(int));
    
            var mESReworkedQtyParameter = mESReworkedQty.HasValue ?
                new ObjectParameter("MESReworkedQty", mESReworkedQty) :
                new ObjectParameter("MESReworkedQty", typeof(int));
    
            var sortedEndDateParameter = sortedEndDate.HasValue ?
                new ObjectParameter("SortedEndDate", sortedEndDate) :
                new ObjectParameter("SortedEndDate", typeof(System.DateTime));
    
            var totalNumberOfPartsRejectedParameter = totalNumberOfPartsRejected.HasValue ?
                new ObjectParameter("TotalNumberOfPartsRejected", totalNumberOfPartsRejected) :
                new ObjectParameter("TotalNumberOfPartsRejected", typeof(int));
    
            var customerIssuedCreditDateParameter = customerIssuedCreditDate.HasValue ?
                new ObjectParameter("CustomerIssuedCreditDate", customerIssuedCreditDate) :
                new ObjectParameter("CustomerIssuedCreditDate", typeof(System.DateTime));
    
            var supplierCodeParameter = supplierCode != null ?
                new ObjectParameter("SupplierCode", supplierCode) :
                new ObjectParameter("SupplierCode", typeof(string));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var supplierContactNameParameter = supplierContactName != null ?
                new ObjectParameter("SupplierContactName", supplierContactName) :
                new ObjectParameter("SupplierContactName", typeof(string));
    
            var sortingCostParameter = sortingCost.HasValue ?
                new ObjectParameter("SortingCost", sortingCost) :
                new ObjectParameter("SortingCost", typeof(decimal));
    
            var supplierIssuedDebitDateParameter = supplierIssuedDebitDate.HasValue ?
                new ObjectParameter("SupplierIssuedDebitDate", supplierIssuedDebitDate) :
                new ObjectParameter("SupplierIssuedDebitDate", typeof(System.DateTime));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var dispositionOfPartsParameter = dispositionOfParts != null ?
                new ObjectParameter("DispositionOfParts", dispositionOfParts) :
                new ObjectParameter("DispositionOfParts", typeof(string));
    
            var finalQtyScrappedParameter = finalQtyScrapped.HasValue ?
                new ObjectParameter("FinalQtyScrapped", finalQtyScrapped) :
                new ObjectParameter("FinalQtyScrapped", typeof(int));
    
            var finalQtyGoodParameter = finalQtyGood.HasValue ?
                new ObjectParameter("FinalQtyGood", finalQtyGood) :
                new ObjectParameter("FinalQtyGood", typeof(int));
    
            var weightPerPieceParameter = weightPerPiece != null ?
                new ObjectParameter("WeightPerPiece", weightPerPiece) :
                new ObjectParameter("WeightPerPiece", typeof(string));
    
            var sellingPricePerPieceParameter = sellingPricePerPiece.HasValue ?
                new ObjectParameter("SellingPricePerPiece", sellingPricePerPiece) :
                new ObjectParameter("SellingPricePerPiece", typeof(decimal));
    
            var loginByParameter = loginBy != null ?
                new ObjectParameter("LoginBy", loginBy) :
                new ObjectParameter("LoginBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dtSaveDefectTrackingDetails", defectTrackingDetailId, defectTrackingIdParameter, aPQPItemIdParameter, dateRejectedParameter, partNameParameter, customerInitialRejectQtyParameter, defectDescriptionParameter, sortedStartDateParameter, customerBalanceSortedQtyParameter, customerAdditionalRejectQtyParameter, customerTotalReworkedQtyParameter, customerRejectedPartQtyParameter, correctiveActionNumberParameter, correctiveActionInitiatedByParameter, correctiveActionInitiatedDateParameter, correctiveActionDueDateParameter, actualCompletedDateParameter, mESWarehouseLocationParameter, mESWarehouseLocationIdParameter, mESTotalSortedQtyParameter, mESRejectDuringSortParameter, mESReworkedQtyParameter, sortedEndDateParameter, totalNumberOfPartsRejectedParameter, customerIssuedCreditDateParameter, supplierCodeParameter, supplierNameParameter, supplierContactNameParameter, sortingCostParameter, supplierIssuedDebitDateParameter, commentParameter, regionParameter, dispositionOfPartsParameter, finalQtyScrappedParameter, finalQtyGoodParameter, weightPerPieceParameter, sellingPricePerPieceParameter, loginByParameter, errorKey);
        }
    
        public virtual ObjectResult<crGetChangeLogByItemId_Result> crGetChangeLogByItemId(Nullable<int> crItemId)
        {
            var crItemIdParameter = crItemId.HasValue ?
                new ObjectParameter("crItemId", crItemId) :
                new ObjectParameter("crItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<crGetChangeLogByItemId_Result>("crGetChangeLogByItemId", crItemIdParameter);
        }
    
        public virtual ObjectResult<GetSCListByCode_Result> GetSCListByCode(string supplierCode)
        {
            var supplierCodeParameter = supplierCode != null ?
                new ObjectParameter("SupplierCode", supplierCode) :
                new ObjectParameter("SupplierCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSCListByCode_Result>("GetSCListByCode", supplierCodeParameter);
        }
    
        public virtual int dtDeleteDefectTrackingDetail(Nullable<int> defectTrackingDetailId, ObjectParameter errorKey)
        {
            var defectTrackingDetailIdParameter = defectTrackingDetailId.HasValue ?
                new ObjectParameter("DefectTrackingDetailId", defectTrackingDetailId) :
                new ObjectParameter("DefectTrackingDetailId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dtDeleteDefectTrackingDetail", defectTrackingDetailIdParameter, errorKey);
        }
    
        public virtual ObjectResult<dtGetDefectTrackingChangeLogByItemId_Result> dtGetDefectTrackingChangeLogByItemId(Nullable<int> defectTrackingId, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var defectTrackingIdParameter = defectTrackingId.HasValue ?
                new ObjectParameter("DefectTrackingId", defectTrackingId) :
                new ObjectParameter("DefectTrackingId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtGetDefectTrackingChangeLogByItemId_Result>("dtGetDefectTrackingChangeLogByItemId", defectTrackingIdParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<dtGetDefectTrackingDetailLogByDTId_Result> dtGetDefectTrackingDetailLogByDTId(Nullable<int> defectTrackingId, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var defectTrackingIdParameter = defectTrackingId.HasValue ?
                new ObjectParameter("DefectTrackingId", defectTrackingId) :
                new ObjectParameter("DefectTrackingId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtGetDefectTrackingDetailLogByDTId_Result>("dtGetDefectTrackingDetailLogByDTId", defectTrackingIdParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<dtGetPartDocumentByDTId_Result> dtGetPartDocumentByDTId(Nullable<int> defectTrackingId)
        {
            var defectTrackingIdParameter = defectTrackingId.HasValue ?
                new ObjectParameter("DefectTrackingId", defectTrackingId) :
                new ObjectParameter("DefectTrackingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtGetPartDocumentByDTId_Result>("dtGetPartDocumentByDTId", defectTrackingIdParameter);
        }
    
        public virtual ObjectResult<dtGetDefectTrackings_Result> dtGetDefectTrackings(string rMANumber, string customerName, string supplierName, Nullable<int> aPQPItemId, string rMAInitiatedBy, string correctiveActionNumber, Nullable<short> mESWarehouseLocationId, string supplierCode, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var rMANumberParameter = rMANumber != null ?
                new ObjectParameter("RMANumber", rMANumber) :
                new ObjectParameter("RMANumber", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            var rMAInitiatedByParameter = rMAInitiatedBy != null ?
                new ObjectParameter("RMAInitiatedBy", rMAInitiatedBy) :
                new ObjectParameter("RMAInitiatedBy", typeof(string));
    
            var correctiveActionNumberParameter = correctiveActionNumber != null ?
                new ObjectParameter("CorrectiveActionNumber", correctiveActionNumber) :
                new ObjectParameter("CorrectiveActionNumber", typeof(string));
    
            var mESWarehouseLocationIdParameter = mESWarehouseLocationId.HasValue ?
                new ObjectParameter("MESWarehouseLocationId", mESWarehouseLocationId) :
                new ObjectParameter("MESWarehouseLocationId", typeof(short));
    
            var supplierCodeParameter = supplierCode != null ?
                new ObjectParameter("SupplierCode", supplierCode) :
                new ObjectParameter("SupplierCode", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtGetDefectTrackings_Result>("dtGetDefectTrackings", rMANumberParameter, customerNameParameter, supplierNameParameter, aPQPItemIdParameter, rMAInitiatedByParameter, correctiveActionNumberParameter, mESWarehouseLocationIdParameter, supplierCodeParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<GetSAPSupplierLookUp_Result> GetSAPSupplierLookUp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSAPSupplierLookUp_Result>("GetSAPSupplierLookUp");
        }
    
        public virtual ObjectResult<crGetDocumentByLogId_Result> crGetDocumentByLogId(string auditLogIds)
        {
            var auditLogIdsParameter = auditLogIds != null ?
                new ObjectParameter("AuditLogIds", auditLogIds) :
                new ObjectParameter("AuditLogIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<crGetDocumentByLogId_Result>("crGetDocumentByLogId", auditLogIdsParameter);
        }
    
        public virtual ObjectResult<GetDocumentByAPQPItemById_Result> GetDocumentByAPQPItemById(Nullable<int> aPQPItemId)
        {
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentByAPQPItemById_Result>("GetDocumentByAPQPItemById", aPQPItemIdParameter);
        }
    
        public virtual ObjectResult<GetDocumentManagements_Result> GetDocumentManagements(string rFQNumber, string quoteNumber, string customerName, string partNumber, string partDesc, string statusIds, string sAMUserId, string aPQPEngineerId, string supplyChainCoordinatorId, Nullable<bool> allowConfidentialDocumentType, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var rFQNumberParameter = rFQNumber != null ?
                new ObjectParameter("RFQNumber", rFQNumber) :
                new ObjectParameter("RFQNumber", typeof(string));
    
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var partDescParameter = partDesc != null ?
                new ObjectParameter("PartDesc", partDesc) :
                new ObjectParameter("PartDesc", typeof(string));
    
            var statusIdsParameter = statusIds != null ?
                new ObjectParameter("StatusIds", statusIds) :
                new ObjectParameter("StatusIds", typeof(string));
    
            var sAMUserIdParameter = sAMUserId != null ?
                new ObjectParameter("SAMUserId", sAMUserId) :
                new ObjectParameter("SAMUserId", typeof(string));
    
            var aPQPEngineerIdParameter = aPQPEngineerId != null ?
                new ObjectParameter("APQPEngineerId", aPQPEngineerId) :
                new ObjectParameter("APQPEngineerId", typeof(string));
    
            var supplyChainCoordinatorIdParameter = supplyChainCoordinatorId != null ?
                new ObjectParameter("SupplyChainCoordinatorId", supplyChainCoordinatorId) :
                new ObjectParameter("SupplyChainCoordinatorId", typeof(string));
    
            var allowConfidentialDocumentTypeParameter = allowConfidentialDocumentType.HasValue ?
                new ObjectParameter("AllowConfidentialDocumentType", allowConfidentialDocumentType) :
                new ObjectParameter("AllowConfidentialDocumentType", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentManagements_Result>("GetDocumentManagements", rFQNumberParameter, quoteNumberParameter, customerNameParameter, partNumberParameter, partDescParameter, statusIdsParameter, sAMUserIdParameter, aPQPEngineerIdParameter, supplyChainCoordinatorIdParameter, allowConfidentialDocumentTypeParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<GetSupplierDetailsByCode_Result> GetSupplierDetailsByCode(string supplierCode)
        {
            var supplierCodeParameter = supplierCode != null ?
                new ObjectParameter("SupplierCode", supplierCode) :
                new ObjectParameter("SupplierCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSupplierDetailsByCode_Result>("GetSupplierDetailsByCode", supplierCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetDocumentsAvailabilityByAPQPItemId(Nullable<int> aPQPItemId, Nullable<bool> allowConfidentialDocumentType)
        {
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            var allowConfidentialDocumentTypeParameter = allowConfidentialDocumentType.HasValue ?
                new ObjectParameter("AllowConfidentialDocumentType", allowConfidentialDocumentType) :
                new ObjectParameter("AllowConfidentialDocumentType", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetDocumentsAvailabilityByAPQPItemId", aPQPItemIdParameter, allowConfidentialDocumentTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> getNextOrPreviousAPQPItemId(string rFQNumber, string quoteNumber, string customerName, string partNumber, string projectName, string statusIds, string sAMUserId, string aPQPEngineerId, string supplyChainCoordinatorId, Nullable<bool> allowConfidentialDocumentType, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var rFQNumberParameter = rFQNumber != null ?
                new ObjectParameter("RFQNumber", rFQNumber) :
                new ObjectParameter("RFQNumber", typeof(string));
    
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var statusIdsParameter = statusIds != null ?
                new ObjectParameter("StatusIds", statusIds) :
                new ObjectParameter("StatusIds", typeof(string));
    
            var sAMUserIdParameter = sAMUserId != null ?
                new ObjectParameter("SAMUserId", sAMUserId) :
                new ObjectParameter("SAMUserId", typeof(string));
    
            var aPQPEngineerIdParameter = aPQPEngineerId != null ?
                new ObjectParameter("APQPEngineerId", aPQPEngineerId) :
                new ObjectParameter("APQPEngineerId", typeof(string));
    
            var supplyChainCoordinatorIdParameter = supplyChainCoordinatorId != null ?
                new ObjectParameter("SupplyChainCoordinatorId", supplyChainCoordinatorId) :
                new ObjectParameter("SupplyChainCoordinatorId", typeof(string));
    
            var allowConfidentialDocumentTypeParameter = allowConfidentialDocumentType.HasValue ?
                new ObjectParameter("AllowConfidentialDocumentType", allowConfidentialDocumentType) :
                new ObjectParameter("AllowConfidentialDocumentType", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getNextOrPreviousAPQPItemId", rFQNumberParameter, quoteNumberParameter, customerNameParameter, partNumberParameter, projectNameParameter, statusIdsParameter, sAMUserIdParameter, aPQPEngineerIdParameter, supplyChainCoordinatorIdParameter, allowConfidentialDocumentTypeParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual int DeleteAPQPItemById(Nullable<int> aPQPItemId)
        {
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAPQPItemById", aPQPItemIdParameter);
        }
    
        public virtual ObjectResult<GetCRDocumentsByAPQPItemId_Result> GetCRDocumentsByAPQPItemId(Nullable<int> aPQPItemId)
        {
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCRDocumentsByAPQPItemId_Result>("GetCRDocumentsByAPQPItemId", aPQPItemIdParameter);
        }
    
        public virtual ObjectResult<GetProjectStatus_Result> GetProjectStatus(string customerName, string aPQPEngineerId, string partNumber, string projectName, string supplyChainCoordinatorId, string sAMUserId, string manufacturerName, string manufacturerCode, string rFQNumber, string quoteNumber, string aPQPStatusIds, Nullable<System.DateTime> projectKickoffStartDate, Nullable<System.DateTime> projectKickoffEnddate, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var aPQPEngineerIdParameter = aPQPEngineerId != null ?
                new ObjectParameter("APQPEngineerId", aPQPEngineerId) :
                new ObjectParameter("APQPEngineerId", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var supplyChainCoordinatorIdParameter = supplyChainCoordinatorId != null ?
                new ObjectParameter("SupplyChainCoordinatorId", supplyChainCoordinatorId) :
                new ObjectParameter("SupplyChainCoordinatorId", typeof(string));
    
            var sAMUserIdParameter = sAMUserId != null ?
                new ObjectParameter("SAMUserId", sAMUserId) :
                new ObjectParameter("SAMUserId", typeof(string));
    
            var manufacturerNameParameter = manufacturerName != null ?
                new ObjectParameter("ManufacturerName", manufacturerName) :
                new ObjectParameter("ManufacturerName", typeof(string));
    
            var manufacturerCodeParameter = manufacturerCode != null ?
                new ObjectParameter("ManufacturerCode", manufacturerCode) :
                new ObjectParameter("ManufacturerCode", typeof(string));
    
            var rFQNumberParameter = rFQNumber != null ?
                new ObjectParameter("RFQNumber", rFQNumber) :
                new ObjectParameter("RFQNumber", typeof(string));
    
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var aPQPStatusIdsParameter = aPQPStatusIds != null ?
                new ObjectParameter("APQPStatusIds", aPQPStatusIds) :
                new ObjectParameter("APQPStatusIds", typeof(string));
    
            var projectKickoffStartDateParameter = projectKickoffStartDate.HasValue ?
                new ObjectParameter("ProjectKickoffStartDate", projectKickoffStartDate) :
                new ObjectParameter("ProjectKickoffStartDate", typeof(System.DateTime));
    
            var projectKickoffEnddateParameter = projectKickoffEnddate.HasValue ?
                new ObjectParameter("ProjectKickoffEnddate", projectKickoffEnddate) :
                new ObjectParameter("ProjectKickoffEnddate", typeof(System.DateTime));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProjectStatus_Result>("GetProjectStatus", customerNameParameter, aPQPEngineerIdParameter, partNumberParameter, projectNameParameter, supplyChainCoordinatorIdParameter, sAMUserIdParameter, manufacturerNameParameter, manufacturerCodeParameter, rFQNumberParameter, quoteNumberParameter, aPQPStatusIdsParameter, projectKickoffStartDateParameter, projectKickoffEnddateParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual int CreateAssessmentRevision(Nullable<int> assessmentID, string createdBy, ObjectParameter revisionId)
        {
            var assessmentIDParameter = assessmentID.HasValue ?
                new ObjectParameter("AssessmentID", assessmentID) :
                new ObjectParameter("AssessmentID", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateAssessmentRevision", assessmentIDParameter, createdByParameter, revisionId);
        }
    
        public virtual ObjectResult<dtGetDefectTrackingReportFirstPart_Result> dtGetDefectTrackingReportFirstPart(string rMANumber, string customerName, string supplierName, Nullable<int> aPQPItemId, string rMAInitiatedBy, string correctiveActionNumber, string mESWarehouseLocation, string supplierCode, Nullable<System.DateTime> rMAFromDate, Nullable<System.DateTime> rMAToDate)
        {
            var rMANumberParameter = rMANumber != null ?
                new ObjectParameter("RMANumber", rMANumber) :
                new ObjectParameter("RMANumber", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            var rMAInitiatedByParameter = rMAInitiatedBy != null ?
                new ObjectParameter("RMAInitiatedBy", rMAInitiatedBy) :
                new ObjectParameter("RMAInitiatedBy", typeof(string));
    
            var correctiveActionNumberParameter = correctiveActionNumber != null ?
                new ObjectParameter("CorrectiveActionNumber", correctiveActionNumber) :
                new ObjectParameter("CorrectiveActionNumber", typeof(string));
    
            var mESWarehouseLocationParameter = mESWarehouseLocation != null ?
                new ObjectParameter("MESWarehouseLocation", mESWarehouseLocation) :
                new ObjectParameter("MESWarehouseLocation", typeof(string));
    
            var supplierCodeParameter = supplierCode != null ?
                new ObjectParameter("SupplierCode", supplierCode) :
                new ObjectParameter("SupplierCode", typeof(string));
    
            var rMAFromDateParameter = rMAFromDate.HasValue ?
                new ObjectParameter("RMAFromDate", rMAFromDate) :
                new ObjectParameter("RMAFromDate", typeof(System.DateTime));
    
            var rMAToDateParameter = rMAToDate.HasValue ?
                new ObjectParameter("RMAToDate", rMAToDate) :
                new ObjectParameter("RMAToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtGetDefectTrackingReportFirstPart_Result>("dtGetDefectTrackingReportFirstPart", rMANumberParameter, customerNameParameter, supplierNameParameter, aPQPItemIdParameter, rMAInitiatedByParameter, correctiveActionNumberParameter, mESWarehouseLocationParameter, supplierCodeParameter, rMAFromDateParameter, rMAToDateParameter);
        }
    
        public virtual ObjectResult<dtGetDefectTrackingReportSecondPart_Result> dtGetDefectTrackingReportSecondPart(string rMANumber, string customerName, string supplierName, Nullable<int> aPQPItemId, string rMAInitiatedBy, string correctiveActionNumber, string mESWarehouseLocation, string supplierCode, Nullable<System.DateTime> rMAFromDate, Nullable<System.DateTime> rMAToDate)
        {
            var rMANumberParameter = rMANumber != null ?
                new ObjectParameter("RMANumber", rMANumber) :
                new ObjectParameter("RMANumber", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            var rMAInitiatedByParameter = rMAInitiatedBy != null ?
                new ObjectParameter("RMAInitiatedBy", rMAInitiatedBy) :
                new ObjectParameter("RMAInitiatedBy", typeof(string));
    
            var correctiveActionNumberParameter = correctiveActionNumber != null ?
                new ObjectParameter("CorrectiveActionNumber", correctiveActionNumber) :
                new ObjectParameter("CorrectiveActionNumber", typeof(string));
    
            var mESWarehouseLocationParameter = mESWarehouseLocation != null ?
                new ObjectParameter("MESWarehouseLocation", mESWarehouseLocation) :
                new ObjectParameter("MESWarehouseLocation", typeof(string));
    
            var supplierCodeParameter = supplierCode != null ?
                new ObjectParameter("SupplierCode", supplierCode) :
                new ObjectParameter("SupplierCode", typeof(string));
    
            var rMAFromDateParameter = rMAFromDate.HasValue ?
                new ObjectParameter("RMAFromDate", rMAFromDate) :
                new ObjectParameter("RMAFromDate", typeof(System.DateTime));
    
            var rMAToDateParameter = rMAToDate.HasValue ?
                new ObjectParameter("RMAToDate", rMAToDate) :
                new ObjectParameter("RMAToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtGetDefectTrackingReportSecondPart_Result>("dtGetDefectTrackingReportSecondPart", rMANumberParameter, customerNameParameter, supplierNameParameter, aPQPItemIdParameter, rMAInitiatedByParameter, correctiveActionNumberParameter, mESWarehouseLocationParameter, supplierCodeParameter, rMAFromDateParameter, rMAToDateParameter);
        }
    
        public virtual ObjectResult<GetDashboardSummary_Result> GetDashboardSummary(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDashboardSummary_Result>("GetDashboardSummary", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<apqpGetChangeLogByItemId_Result> apqpGetChangeLogByItemId(Nullable<int> aPQPItemId, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<apqpGetChangeLogByItemId_Result>("apqpGetChangeLogByItemId", aPQPItemIdParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<crGetChangeLogByAPQPItemId_Result> crGetChangeLogByAPQPItemId(Nullable<int> aPQPItemId)
        {
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<crGetChangeLogByAPQPItemId_Result>("crGetChangeLogByAPQPItemId", aPQPItemIdParameter);
        }
    
        public virtual int InsertQuoteDetails(string quoteId, string quoteRevision, Nullable<int> supplierId, Nullable<int> partId, Nullable<decimal> supplierCost, Nullable<decimal> shippingCost, Nullable<decimal> warehousing, Nullable<decimal> sGAProfit, Nullable<decimal> toolingCost, Nullable<decimal> salesCommission, Nullable<decimal> customDuties, Nullable<decimal> supplierQuotedPrice, Nullable<decimal> supplierPriceUsed, Nullable<decimal> finalMES, Nullable<decimal> finalMESPerKg, string toolingWarranty, string supplierToolingLeadtime, string leadtime, Nullable<decimal> totalAnnualCost, string shippingAssumption, Nullable<int> minOrderQty, string loginBy, ObjectParameter errorNumber)
        {
            var quoteIdParameter = quoteId != null ?
                new ObjectParameter("QuoteId", quoteId) :
                new ObjectParameter("QuoteId", typeof(string));
    
            var quoteRevisionParameter = quoteRevision != null ?
                new ObjectParameter("QuoteRevision", quoteRevision) :
                new ObjectParameter("QuoteRevision", typeof(string));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var partIdParameter = partId.HasValue ?
                new ObjectParameter("PartId", partId) :
                new ObjectParameter("PartId", typeof(int));
    
            var supplierCostParameter = supplierCost.HasValue ?
                new ObjectParameter("SupplierCost", supplierCost) :
                new ObjectParameter("SupplierCost", typeof(decimal));
    
            var shippingCostParameter = shippingCost.HasValue ?
                new ObjectParameter("ShippingCost", shippingCost) :
                new ObjectParameter("ShippingCost", typeof(decimal));
    
            var warehousingParameter = warehousing.HasValue ?
                new ObjectParameter("Warehousing", warehousing) :
                new ObjectParameter("Warehousing", typeof(decimal));
    
            var sGAProfitParameter = sGAProfit.HasValue ?
                new ObjectParameter("SGAProfit", sGAProfit) :
                new ObjectParameter("SGAProfit", typeof(decimal));
    
            var toolingCostParameter = toolingCost.HasValue ?
                new ObjectParameter("ToolingCost", toolingCost) :
                new ObjectParameter("ToolingCost", typeof(decimal));
    
            var salesCommissionParameter = salesCommission.HasValue ?
                new ObjectParameter("SalesCommission", salesCommission) :
                new ObjectParameter("SalesCommission", typeof(decimal));
    
            var customDutiesParameter = customDuties.HasValue ?
                new ObjectParameter("CustomDuties", customDuties) :
                new ObjectParameter("CustomDuties", typeof(decimal));
    
            var supplierQuotedPriceParameter = supplierQuotedPrice.HasValue ?
                new ObjectParameter("SupplierQuotedPrice", supplierQuotedPrice) :
                new ObjectParameter("SupplierQuotedPrice", typeof(decimal));
    
            var supplierPriceUsedParameter = supplierPriceUsed.HasValue ?
                new ObjectParameter("SupplierPriceUsed", supplierPriceUsed) :
                new ObjectParameter("SupplierPriceUsed", typeof(decimal));
    
            var finalMESParameter = finalMES.HasValue ?
                new ObjectParameter("FinalMES", finalMES) :
                new ObjectParameter("FinalMES", typeof(decimal));
    
            var finalMESPerKgParameter = finalMESPerKg.HasValue ?
                new ObjectParameter("FinalMESPerKg", finalMESPerKg) :
                new ObjectParameter("FinalMESPerKg", typeof(decimal));
    
            var toolingWarrantyParameter = toolingWarranty != null ?
                new ObjectParameter("ToolingWarranty", toolingWarranty) :
                new ObjectParameter("ToolingWarranty", typeof(string));
    
            var supplierToolingLeadtimeParameter = supplierToolingLeadtime != null ?
                new ObjectParameter("SupplierToolingLeadtime", supplierToolingLeadtime) :
                new ObjectParameter("SupplierToolingLeadtime", typeof(string));
    
            var leadtimeParameter = leadtime != null ?
                new ObjectParameter("Leadtime", leadtime) :
                new ObjectParameter("Leadtime", typeof(string));
    
            var totalAnnualCostParameter = totalAnnualCost.HasValue ?
                new ObjectParameter("TotalAnnualCost", totalAnnualCost) :
                new ObjectParameter("TotalAnnualCost", typeof(decimal));
    
            var shippingAssumptionParameter = shippingAssumption != null ?
                new ObjectParameter("ShippingAssumption", shippingAssumption) :
                new ObjectParameter("ShippingAssumption", typeof(string));
    
            var minOrderQtyParameter = minOrderQty.HasValue ?
                new ObjectParameter("MinOrderQty", minOrderQty) :
                new ObjectParameter("MinOrderQty", typeof(int));
    
            var loginByParameter = loginBy != null ?
                new ObjectParameter("LoginBy", loginBy) :
                new ObjectParameter("LoginBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertQuoteDetails", quoteIdParameter, quoteRevisionParameter, supplierIdParameter, partIdParameter, supplierCostParameter, shippingCostParameter, warehousingParameter, sGAProfitParameter, toolingCostParameter, salesCommissionParameter, customDutiesParameter, supplierQuotedPriceParameter, supplierPriceUsedParameter, finalMESParameter, finalMESPerKgParameter, toolingWarrantyParameter, supplierToolingLeadtimeParameter, leadtimeParameter, totalAnnualCostParameter, shippingAssumptionParameter, minOrderQtyParameter, loginByParameter, errorNumber);
        }
    
        public virtual int UpdateQuoteDetails(Nullable<int> id, string quoteRevision, Nullable<int> supplierId, Nullable<decimal> supplierCost, Nullable<decimal> shippingCost, Nullable<decimal> warehousing, Nullable<decimal> sGAProfit, Nullable<decimal> toolingCost, Nullable<decimal> salesCommission, Nullable<decimal> customDuties, Nullable<decimal> supplierQuotedPrice, Nullable<decimal> supplierPriceUsed, Nullable<decimal> finalMES, Nullable<decimal> finalMESPerKg, string toolingWarranty, string supplierToolingLeadtime, string leadtime, Nullable<decimal> totalAnnualCost, string shippingAssumption, Nullable<int> minOrderQty, string loginBy, ObjectParameter errorNumber)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var quoteRevisionParameter = quoteRevision != null ?
                new ObjectParameter("QuoteRevision", quoteRevision) :
                new ObjectParameter("QuoteRevision", typeof(string));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var supplierCostParameter = supplierCost.HasValue ?
                new ObjectParameter("SupplierCost", supplierCost) :
                new ObjectParameter("SupplierCost", typeof(decimal));
    
            var shippingCostParameter = shippingCost.HasValue ?
                new ObjectParameter("ShippingCost", shippingCost) :
                new ObjectParameter("ShippingCost", typeof(decimal));
    
            var warehousingParameter = warehousing.HasValue ?
                new ObjectParameter("Warehousing", warehousing) :
                new ObjectParameter("Warehousing", typeof(decimal));
    
            var sGAProfitParameter = sGAProfit.HasValue ?
                new ObjectParameter("SGAProfit", sGAProfit) :
                new ObjectParameter("SGAProfit", typeof(decimal));
    
            var toolingCostParameter = toolingCost.HasValue ?
                new ObjectParameter("ToolingCost", toolingCost) :
                new ObjectParameter("ToolingCost", typeof(decimal));
    
            var salesCommissionParameter = salesCommission.HasValue ?
                new ObjectParameter("SalesCommission", salesCommission) :
                new ObjectParameter("SalesCommission", typeof(decimal));
    
            var customDutiesParameter = customDuties.HasValue ?
                new ObjectParameter("CustomDuties", customDuties) :
                new ObjectParameter("CustomDuties", typeof(decimal));
    
            var supplierQuotedPriceParameter = supplierQuotedPrice.HasValue ?
                new ObjectParameter("SupplierQuotedPrice", supplierQuotedPrice) :
                new ObjectParameter("SupplierQuotedPrice", typeof(decimal));
    
            var supplierPriceUsedParameter = supplierPriceUsed.HasValue ?
                new ObjectParameter("SupplierPriceUsed", supplierPriceUsed) :
                new ObjectParameter("SupplierPriceUsed", typeof(decimal));
    
            var finalMESParameter = finalMES.HasValue ?
                new ObjectParameter("FinalMES", finalMES) :
                new ObjectParameter("FinalMES", typeof(decimal));
    
            var finalMESPerKgParameter = finalMESPerKg.HasValue ?
                new ObjectParameter("FinalMESPerKg", finalMESPerKg) :
                new ObjectParameter("FinalMESPerKg", typeof(decimal));
    
            var toolingWarrantyParameter = toolingWarranty != null ?
                new ObjectParameter("ToolingWarranty", toolingWarranty) :
                new ObjectParameter("ToolingWarranty", typeof(string));
    
            var supplierToolingLeadtimeParameter = supplierToolingLeadtime != null ?
                new ObjectParameter("SupplierToolingLeadtime", supplierToolingLeadtime) :
                new ObjectParameter("SupplierToolingLeadtime", typeof(string));
    
            var leadtimeParameter = leadtime != null ?
                new ObjectParameter("Leadtime", leadtime) :
                new ObjectParameter("Leadtime", typeof(string));
    
            var totalAnnualCostParameter = totalAnnualCost.HasValue ?
                new ObjectParameter("TotalAnnualCost", totalAnnualCost) :
                new ObjectParameter("TotalAnnualCost", typeof(decimal));
    
            var shippingAssumptionParameter = shippingAssumption != null ?
                new ObjectParameter("ShippingAssumption", shippingAssumption) :
                new ObjectParameter("ShippingAssumption", typeof(string));
    
            var minOrderQtyParameter = minOrderQty.HasValue ?
                new ObjectParameter("MinOrderQty", minOrderQty) :
                new ObjectParameter("MinOrderQty", typeof(int));
    
            var loginByParameter = loginBy != null ?
                new ObjectParameter("LoginBy", loginBy) :
                new ObjectParameter("LoginBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateQuoteDetails", idParameter, quoteRevisionParameter, supplierIdParameter, supplierCostParameter, shippingCostParameter, warehousingParameter, sGAProfitParameter, toolingCostParameter, salesCommissionParameter, customDutiesParameter, supplierQuotedPriceParameter, supplierPriceUsedParameter, finalMESParameter, finalMESPerKgParameter, toolingWarrantyParameter, supplierToolingLeadtimeParameter, leadtimeParameter, totalAnnualCostParameter, shippingAssumptionParameter, minOrderQtyParameter, loginByParameter, errorNumber);
        }
    
        public virtual ObjectResult<GenerateRevisionQuoteNumber_Result> GenerateRevisionQuoteNumber(string rfqId)
        {
            var rfqIdParameter = rfqId != null ?
                new ObjectParameter("rfqId", rfqId) :
                new ObjectParameter("rfqId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenerateRevisionQuoteNumber_Result>("GenerateRevisionQuoteNumber", rfqIdParameter);
        }
    
        public virtual ObjectResult<GetAPQPPPAPApprovedData_Result> GetAPQPPPAPApprovedData(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string customerName, string aPQPQualityEngineerIds, string supplyChainCoordinatorIds, string sAMUserIds, string projectStageIds, string pPAPStatus, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var aPQPQualityEngineerIdsParameter = aPQPQualityEngineerIds != null ?
                new ObjectParameter("APQPQualityEngineerIds", aPQPQualityEngineerIds) :
                new ObjectParameter("APQPQualityEngineerIds", typeof(string));
    
            var supplyChainCoordinatorIdsParameter = supplyChainCoordinatorIds != null ?
                new ObjectParameter("SupplyChainCoordinatorIds", supplyChainCoordinatorIds) :
                new ObjectParameter("SupplyChainCoordinatorIds", typeof(string));
    
            var sAMUserIdsParameter = sAMUserIds != null ?
                new ObjectParameter("SAMUserIds", sAMUserIds) :
                new ObjectParameter("SAMUserIds", typeof(string));
    
            var projectStageIdsParameter = projectStageIds != null ?
                new ObjectParameter("ProjectStageIds", projectStageIds) :
                new ObjectParameter("ProjectStageIds", typeof(string));
    
            var pPAPStatusParameter = pPAPStatus != null ?
                new ObjectParameter("PPAPStatus", pPAPStatus) :
                new ObjectParameter("PPAPStatus", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPQPPPAPApprovedData_Result>("GetAPQPPPAPApprovedData", dateFromParameter, dateToParameter, customerNameParameter, aPQPQualityEngineerIdsParameter, supplyChainCoordinatorIdsParameter, sAMUserIdsParameter, projectStageIdsParameter, pPAPStatusParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<GetAPQPWeeklyMeetingReportPartA_Result> GetAPQPWeeklyMeetingReportPartA(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPQPWeeklyMeetingReportPartA_Result>("GetAPQPWeeklyMeetingReportPartA", dateFromParameter, dateToParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<GetAPQPWeeklyMeetingReportPartB_Result> GetAPQPWeeklyMeetingReportPartB(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPQPWeeklyMeetingReportPartB_Result>("GetAPQPWeeklyMeetingReportPartB", dateFromParameter, dateToParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<GetAPQPWeeklyMeetingReportPartC_Result> GetAPQPWeeklyMeetingReportPartC(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPQPWeeklyMeetingReportPartC_Result>("GetAPQPWeeklyMeetingReportPartC", dateFromParameter, dateToParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<GetAPQPWeeklyMeetingReportPartD_Result> GetAPQPWeeklyMeetingReportPartD(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAPQPWeeklyMeetingReportPartD_Result>("GetAPQPWeeklyMeetingReportPartD", dateFromParameter, dateToParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchDefectType_Result> SearchDefectType(string defectType, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var defectTypeParameter = defectType != null ?
                new ObjectParameter("DefectType", defectType) :
                new ObjectParameter("DefectType", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchDefectType_Result>("SearchDefectType", defectTypeParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<GetCustomerForSupplierQuote_Result> GetCustomerForSupplierQuote(string partNumber)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerForSupplierQuote_Result>("GetCustomerForSupplierQuote", partNumberParameter);
        }
    
        public virtual ObjectResult<GetRFQForSupplierQuote_Result> GetRFQForSupplierQuote(string partNumber, Nullable<int> customerId)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRFQForSupplierQuote_Result>("GetRFQForSupplierQuote", partNumberParameter, customerIdParameter);
        }
    
        public virtual ObjectResult<capaSearchCAPA_Result> capaSearchCAPA(string correctiveActionNumber, string customerName, string supplierCode, string supplierName, string aPQPItemId, string cAPAInitiatedBy, Nullable<int> defectTypeId, Nullable<System.DateTime> capaOpenDateFrom, Nullable<System.DateTime> capaOpenDateTo, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var correctiveActionNumberParameter = correctiveActionNumber != null ?
                new ObjectParameter("CorrectiveActionNumber", correctiveActionNumber) :
                new ObjectParameter("CorrectiveActionNumber", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var supplierCodeParameter = supplierCode != null ?
                new ObjectParameter("SupplierCode", supplierCode) :
                new ObjectParameter("SupplierCode", typeof(string));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var aPQPItemIdParameter = aPQPItemId != null ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(string));
    
            var cAPAInitiatedByParameter = cAPAInitiatedBy != null ?
                new ObjectParameter("CAPAInitiatedBy", cAPAInitiatedBy) :
                new ObjectParameter("CAPAInitiatedBy", typeof(string));
    
            var defectTypeIdParameter = defectTypeId.HasValue ?
                new ObjectParameter("DefectTypeId", defectTypeId) :
                new ObjectParameter("DefectTypeId", typeof(int));
    
            var capaOpenDateFromParameter = capaOpenDateFrom.HasValue ?
                new ObjectParameter("capaOpenDateFrom", capaOpenDateFrom) :
                new ObjectParameter("capaOpenDateFrom", typeof(System.DateTime));
    
            var capaOpenDateToParameter = capaOpenDateTo.HasValue ?
                new ObjectParameter("capaOpenDateTo", capaOpenDateTo) :
                new ObjectParameter("capaOpenDateTo", typeof(System.DateTime));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<capaSearchCAPA_Result>("capaSearchCAPA", correctiveActionNumberParameter, customerNameParameter, supplierCodeParameter, supplierNameParameter, aPQPItemIdParameter, cAPAInitiatedByParameter, defectTypeIdParameter, capaOpenDateFromParameter, capaOpenDateToParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual int capaDeleteCAPAItems(Nullable<int> id, ObjectParameter errorKey)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("capaDeleteCAPAItems", idParameter, errorKey);
        }
    
        public virtual ObjectResult<capaGetSAPCustomerBySupplier_Result> capaGetSAPCustomerBySupplier(string supplierNameWithCode)
        {
            var supplierNameWithCodeParameter = supplierNameWithCode != null ?
                new ObjectParameter("SupplierNameWithCode", supplierNameWithCode) :
                new ObjectParameter("SupplierNameWithCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<capaGetSAPCustomerBySupplier_Result>("capaGetSAPCustomerBySupplier", supplierNameWithCodeParameter);
        }
    
        public virtual ObjectResult<capaGetSAPPartsList_Result> capaGetSAPPartsList(string supplierNameWithCode, string customerNameWithCode)
        {
            var supplierNameWithCodeParameter = supplierNameWithCode != null ?
                new ObjectParameter("SupplierNameWithCode", supplierNameWithCode) :
                new ObjectParameter("SupplierNameWithCode", typeof(string));
    
            var customerNameWithCodeParameter = customerNameWithCode != null ?
                new ObjectParameter("CustomerNameWithCode", customerNameWithCode) :
                new ObjectParameter("CustomerNameWithCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<capaGetSAPPartsList_Result>("capaGetSAPPartsList", supplierNameWithCodeParameter, customerNameWithCodeParameter);
        }
    
        public virtual int capaDeleteCAPAPartAffectedDetail(Nullable<int> capaPartAffectedDetailId, ObjectParameter errorKey)
        {
            var capaPartAffectedDetailIdParameter = capaPartAffectedDetailId.HasValue ?
                new ObjectParameter("capaPartAffectedDetailId", capaPartAffectedDetailId) :
                new ObjectParameter("capaPartAffectedDetailId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("capaDeleteCAPAPartAffectedDetail", capaPartAffectedDetailIdParameter, errorKey);
        }
    
        public virtual ObjectResult<capaGetDocumentTypeItemForCAPALookup_Result> capaGetDocumentTypeItemForCAPALookup(Nullable<int> aPQPItemId, Nullable<int> documentTypeId, string isEditMode, Nullable<int> associatedToId)
        {
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var isEditModeParameter = isEditMode != null ?
                new ObjectParameter("IsEditMode", isEditMode) :
                new ObjectParameter("IsEditMode", typeof(string));
    
            var associatedToIdParameter = associatedToId.HasValue ?
                new ObjectParameter("AssociatedToId", associatedToId) :
                new ObjectParameter("AssociatedToId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<capaGetDocumentTypeItemForCAPALookup_Result>("capaGetDocumentTypeItemForCAPALookup", aPQPItemIdParameter, documentTypeIdParameter, isEditModeParameter, associatedToIdParameter);
        }
    
        public virtual ObjectResult<capaGetPartDocuments_Result> capaGetPartDocuments(Nullable<int> cAPAPartAffectedDetailId, Nullable<int> associatedToId)
        {
            var cAPAPartAffectedDetailIdParameter = cAPAPartAffectedDetailId.HasValue ?
                new ObjectParameter("CAPAPartAffectedDetailId", cAPAPartAffectedDetailId) :
                new ObjectParameter("CAPAPartAffectedDetailId", typeof(int));
    
            var associatedToIdParameter = associatedToId.HasValue ?
                new ObjectParameter("AssociatedToId", associatedToId) :
                new ObjectParameter("AssociatedToId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<capaGetPartDocuments_Result>("capaGetPartDocuments", cAPAPartAffectedDetailIdParameter, associatedToIdParameter);
        }
    
        public virtual ObjectResult<capaGetcapaItemMasterChangeLogCAPAId_Result> capaGetcapaItemMasterChangeLogCAPAId(Nullable<int> cAPAId, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var cAPAIdParameter = cAPAId.HasValue ?
                new ObjectParameter("CAPAId", cAPAId) :
                new ObjectParameter("CAPAId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<capaGetcapaItemMasterChangeLogCAPAId_Result>("capaGetcapaItemMasterChangeLogCAPAId", cAPAIdParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<capaGetcapaPartAffectedDetailsChangeLogByCAPAId_Result> capaGetcapaPartAffectedDetailsChangeLogByCAPAId(Nullable<int> cAPAId, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var cAPAIdParameter = cAPAId.HasValue ?
                new ObjectParameter("CAPAId", cAPAId) :
                new ObjectParameter("CAPAId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<capaGetcapaPartAffectedDetailsChangeLogByCAPAId_Result>("capaGetcapaPartAffectedDetailsChangeLogByCAPAId", cAPAIdParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual int capaSaveCAPADocumentInToDTDocument(Nullable<int> defectTrackingDetailId, Nullable<int> partAffectedDetailsId, string logInBy, ObjectParameter errorKey)
        {
            var defectTrackingDetailIdParameter = defectTrackingDetailId.HasValue ?
                new ObjectParameter("DefectTrackingDetailId", defectTrackingDetailId) :
                new ObjectParameter("DefectTrackingDetailId", typeof(int));
    
            var partAffectedDetailsIdParameter = partAffectedDetailsId.HasValue ?
                new ObjectParameter("PartAffectedDetailsId", partAffectedDetailsId) :
                new ObjectParameter("PartAffectedDetailsId", typeof(int));
    
            var logInByParameter = logInBy != null ?
                new ObjectParameter("LogInBy", logInBy) :
                new ObjectParameter("LogInBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("capaSaveCAPADocumentInToDTDocument", defectTrackingDetailIdParameter, partAffectedDetailsIdParameter, logInByParameter, errorKey);
        }
    
        public virtual ObjectResult<dtGetDocumentTypeItemForDTLookup_Result> dtGetDocumentTypeItemForDTLookup(Nullable<int> aPQPItemId, Nullable<int> documentTypeId, string isEditMode, Nullable<int> associatedToId)
        {
            var aPQPItemIdParameter = aPQPItemId.HasValue ?
                new ObjectParameter("APQPItemId", aPQPItemId) :
                new ObjectParameter("APQPItemId", typeof(int));
    
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var isEditModeParameter = isEditMode != null ?
                new ObjectParameter("IsEditMode", isEditMode) :
                new ObjectParameter("IsEditMode", typeof(string));
    
            var associatedToIdParameter = associatedToId.HasValue ?
                new ObjectParameter("AssociatedToId", associatedToId) :
                new ObjectParameter("AssociatedToId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtGetDocumentTypeItemForDTLookup_Result>("dtGetDocumentTypeItemForDTLookup", aPQPItemIdParameter, documentTypeIdParameter, isEditModeParameter, associatedToIdParameter);
        }
    
        public virtual int dtSaveDTDocumentInToCAPADocument(Nullable<int> defectTrackingDetailId, Nullable<int> partAffectedDetailsId, string logInBy, ObjectParameter errorKey)
        {
            var defectTrackingDetailIdParameter = defectTrackingDetailId.HasValue ?
                new ObjectParameter("DefectTrackingDetailId", defectTrackingDetailId) :
                new ObjectParameter("DefectTrackingDetailId", typeof(int));
    
            var partAffectedDetailsIdParameter = partAffectedDetailsId.HasValue ?
                new ObjectParameter("PartAffectedDetailsId", partAffectedDetailsId) :
                new ObjectParameter("PartAffectedDetailsId", typeof(int));
    
            var logInByParameter = logInBy != null ?
                new ObjectParameter("LogInBy", logInBy) :
                new ObjectParameter("LogInBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dtSaveDTDocumentInToCAPADocument", defectTrackingDetailIdParameter, partAffectedDetailsIdParameter, logInByParameter, errorKey);
        }
    
        public virtual ObjectResult<capaGetSAPSupplierByCustomer_Result> capaGetSAPSupplierByCustomer(string customerNameWithCode)
        {
            var customerNameWithCodeParameter = customerNameWithCode != null ?
                new ObjectParameter("CustomerNameWithCode", customerNameWithCode) :
                new ObjectParameter("CustomerNameWithCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<capaGetSAPSupplierByCustomer_Result>("capaGetSAPSupplierByCustomer", customerNameWithCodeParameter);
        }
    
        public virtual ObjectResult<capaGetSAPSupplierByItemCode_Result> capaGetSAPSupplierByItemCode(string itemCode)
        {
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<capaGetSAPSupplierByItemCode_Result>("capaGetSAPSupplierByItemCode", itemCodeParameter);
        }
    
        public virtual ObjectResult<string> capaPartsNotAssociated(string supplierNameWithCode, string customerNameWithCode, string itemCodes)
        {
            var supplierNameWithCodeParameter = supplierNameWithCode != null ?
                new ObjectParameter("SupplierNameWithCode", supplierNameWithCode) :
                new ObjectParameter("SupplierNameWithCode", typeof(string));
    
            var customerNameWithCodeParameter = customerNameWithCode != null ?
                new ObjectParameter("CustomerNameWithCode", customerNameWithCode) :
                new ObjectParameter("CustomerNameWithCode", typeof(string));
    
            var itemCodesParameter = itemCodes != null ?
                new ObjectParameter("ItemCodes", itemCodes) :
                new ObjectParameter("ItemCodes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("capaPartsNotAssociated", supplierNameWithCodeParameter, customerNameWithCodeParameter, itemCodesParameter);
        }
    
        public virtual ObjectResult<GetNPIFRecipientsDesignation_Result> GetNPIFRecipientsDesignation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNPIFRecipientsDesignation_Result>("GetNPIFRecipientsDesignation");
        }
    
        public virtual int SaveNPIFRecipients(Nullable<int> apqpItemId, Nullable<short> designationId, string userId, string documentId, string recipientId, string envelopId, string loginBy, ObjectParameter errorKey)
        {
            var apqpItemIdParameter = apqpItemId.HasValue ?
                new ObjectParameter("apqpItemId", apqpItemId) :
                new ObjectParameter("apqpItemId", typeof(int));
    
            var designationIdParameter = designationId.HasValue ?
                new ObjectParameter("DesignationId", designationId) :
                new ObjectParameter("DesignationId", typeof(short));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var documentIdParameter = documentId != null ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(string));
    
            var recipientIdParameter = recipientId != null ?
                new ObjectParameter("RecipientId", recipientId) :
                new ObjectParameter("RecipientId", typeof(string));
    
            var envelopIdParameter = envelopId != null ?
                new ObjectParameter("EnvelopId", envelopId) :
                new ObjectParameter("EnvelopId", typeof(string));
    
            var loginByParameter = loginBy != null ?
                new ObjectParameter("LoginBy", loginBy) :
                new ObjectParameter("LoginBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveNPIFRecipients", apqpItemIdParameter, designationIdParameter, userIdParameter, documentIdParameter, recipientIdParameter, envelopIdParameter, loginByParameter, errorKey);
        }
    
        public virtual ObjectResult<BusinessAnalysisChartQTC_Result> BusinessAnalysisChartQTC(string sAMIds, string customerIds, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string commodityIds, string rFQSourceIds, string rFQTypeIds, string industryTypeIds, string groupByType)
        {
            var sAMIdsParameter = sAMIds != null ?
                new ObjectParameter("SAMIds", sAMIds) :
                new ObjectParameter("SAMIds", typeof(string));
    
            var customerIdsParameter = customerIds != null ?
                new ObjectParameter("CustomerIds", customerIds) :
                new ObjectParameter("CustomerIds", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var commodityIdsParameter = commodityIds != null ?
                new ObjectParameter("CommodityIds", commodityIds) :
                new ObjectParameter("CommodityIds", typeof(string));
    
            var rFQSourceIdsParameter = rFQSourceIds != null ?
                new ObjectParameter("RFQSourceIds", rFQSourceIds) :
                new ObjectParameter("RFQSourceIds", typeof(string));
    
            var rFQTypeIdsParameter = rFQTypeIds != null ?
                new ObjectParameter("RFQTypeIds", rFQTypeIds) :
                new ObjectParameter("RFQTypeIds", typeof(string));
    
            var industryTypeIdsParameter = industryTypeIds != null ?
                new ObjectParameter("IndustryTypeIds", industryTypeIds) :
                new ObjectParameter("IndustryTypeIds", typeof(string));
    
            var groupByTypeParameter = groupByType != null ?
                new ObjectParameter("GroupByType", groupByType) :
                new ObjectParameter("GroupByType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BusinessAnalysisChartQTC_Result>("BusinessAnalysisChartQTC", sAMIdsParameter, customerIdsParameter, startDateParameter, endDateParameter, commodityIdsParameter, rFQSourceIdsParameter, rFQTypeIdsParameter, industryTypeIdsParameter, groupByTypeParameter);
        }
    
        public virtual ObjectResult<BusinessAnalysisReportQTCFirstPart_Result> BusinessAnalysisReportQTCFirstPart(string sAMIds, string customerIds, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string commodityIds, string rFQSourceIds, string industryTypeIds)
        {
            var sAMIdsParameter = sAMIds != null ?
                new ObjectParameter("SAMIds", sAMIds) :
                new ObjectParameter("SAMIds", typeof(string));
    
            var customerIdsParameter = customerIds != null ?
                new ObjectParameter("CustomerIds", customerIds) :
                new ObjectParameter("CustomerIds", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var commodityIdsParameter = commodityIds != null ?
                new ObjectParameter("CommodityIds", commodityIds) :
                new ObjectParameter("CommodityIds", typeof(string));
    
            var rFQSourceIdsParameter = rFQSourceIds != null ?
                new ObjectParameter("RFQSourceIds", rFQSourceIds) :
                new ObjectParameter("RFQSourceIds", typeof(string));
    
            var industryTypeIdsParameter = industryTypeIds != null ?
                new ObjectParameter("IndustryTypeIds", industryTypeIds) :
                new ObjectParameter("IndustryTypeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BusinessAnalysisReportQTCFirstPart_Result>("BusinessAnalysisReportQTCFirstPart", sAMIdsParameter, customerIdsParameter, startDateParameter, endDateParameter, commodityIdsParameter, rFQSourceIdsParameter, industryTypeIdsParameter);
        }
    
        public virtual ObjectResult<BusinessAnalysisReportQTCSecondPart_Result> BusinessAnalysisReportQTCSecondPart(string sAMIds, string customerIds, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string commodityIds, string rFQSourceIds, string rFQTypeIds, string industryTypeIds)
        {
            var sAMIdsParameter = sAMIds != null ?
                new ObjectParameter("SAMIds", sAMIds) :
                new ObjectParameter("SAMIds", typeof(string));
    
            var customerIdsParameter = customerIds != null ?
                new ObjectParameter("CustomerIds", customerIds) :
                new ObjectParameter("CustomerIds", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var commodityIdsParameter = commodityIds != null ?
                new ObjectParameter("CommodityIds", commodityIds) :
                new ObjectParameter("CommodityIds", typeof(string));
    
            var rFQSourceIdsParameter = rFQSourceIds != null ?
                new ObjectParameter("RFQSourceIds", rFQSourceIds) :
                new ObjectParameter("RFQSourceIds", typeof(string));
    
            var rFQTypeIdsParameter = rFQTypeIds != null ?
                new ObjectParameter("RFQTypeIds", rFQTypeIds) :
                new ObjectParameter("RFQTypeIds", typeof(string));
    
            var industryTypeIdsParameter = industryTypeIds != null ?
                new ObjectParameter("IndustryTypeIds", industryTypeIds) :
                new ObjectParameter("IndustryTypeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BusinessAnalysisReportQTCSecondPart_Result>("BusinessAnalysisReportQTCSecondPart", sAMIdsParameter, customerIdsParameter, startDateParameter, endDateParameter, commodityIdsParameter, rFQSourceIdsParameter, rFQTypeIdsParameter, industryTypeIdsParameter);
        }
    
        public virtual ObjectResult<SearchRFQPrioritys_Result> SearchRFQPrioritys(string rFQPriority, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var rFQPriorityParameter = rFQPriority != null ?
                new ObjectParameter("RFQPriority", rFQPriority) :
                new ObjectParameter("RFQPriority", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchRFQPrioritys_Result>("SearchRFQPrioritys", rFQPriorityParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchRFQSuppliers_Result1> SearchRFQSuppliers(string rFQId)
        {
            var rFQIdParameter = rFQId != null ?
                new ObjectParameter("RFQId", rFQId) :
                new ObjectParameter("RFQId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchRFQSuppliers_Result1>("SearchRFQSuppliers", rFQIdParameter);
        }
    
        public virtual ObjectResult<SearchNonAwardFeedbacks_Result1> SearchNonAwardFeedbacks(string nonAwardFeedback, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var nonAwardFeedbackParameter = nonAwardFeedback != null ?
                new ObjectParameter("NonAwardFeedback", nonAwardFeedback) :
                new ObjectParameter("NonAwardFeedback", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchNonAwardFeedbacks_Result1>("SearchNonAwardFeedbacks", nonAwardFeedbackParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchAvailableSuppliers_Result1> SearchAvailableSuppliers(string rFQId, string countryIds, string commodityItemIds, string supplier)
        {
            var rFQIdParameter = rFQId != null ?
                new ObjectParameter("RFQId", rFQId) :
                new ObjectParameter("RFQId", typeof(string));
    
            var countryIdsParameter = countryIds != null ?
                new ObjectParameter("CountryIds", countryIds) :
                new ObjectParameter("CountryIds", typeof(string));
    
            var commodityItemIdsParameter = commodityItemIds != null ?
                new ObjectParameter("CommodityItemIds", commodityItemIds) :
                new ObjectParameter("CommodityItemIds", typeof(string));
    
            var supplierParameter = supplier != null ?
                new ObjectParameter("Supplier", supplier) :
                new ObjectParameter("Supplier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchAvailableSuppliers_Result1>("SearchAvailableSuppliers", rFQIdParameter, countryIdsParameter, commodityItemIdsParameter, supplierParameter);
        }
    
        public virtual ObjectResult<SearchRFQSources_Result2> SearchRFQSources(string rFQSource, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var rFQSourceParameter = rFQSource != null ?
                new ObjectParameter("RFQSource", rFQSource) :
                new ObjectParameter("RFQSource", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchRFQSources_Result2>("SearchRFQSources", rFQSourceParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<SearchIndustryTypes_Result> SearchIndustryTypes(string industryType, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalRecords, string searchText)
        {
            var industryTypeParameter = industryType != null ?
                new ObjectParameter("IndustryType", industryType) :
                new ObjectParameter("IndustryType", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchIndustryTypes_Result>("SearchIndustryTypes", industryTypeParameter, pageNumberParameter, pageSizeParameter, totalRecords, searchTextParameter);
        }
    
        public virtual ObjectResult<GetNewBusinessAwardReport_Result> GetNewBusinessAwardReport(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<double> shippingCost)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var shippingCostParameter = shippingCost.HasValue ?
                new ObjectParameter("ShippingCost", shippingCost) :
                new ObjectParameter("ShippingCost", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNewBusinessAwardReport_Result>("GetNewBusinessAwardReport", startDateParameter, endDateParameter, shippingCostParameter);
        }
    }
}
